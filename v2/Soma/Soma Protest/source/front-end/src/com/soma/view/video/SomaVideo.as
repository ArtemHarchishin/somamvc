package com.soma.view.video {	import com.soma.view.video.events.SomaVideoEvent;	import flash.display.Sprite;	import flash.events.AsyncErrorEvent;	import flash.events.NetStatusEvent;	import flash.events.SecurityErrorEvent;	import flash.events.TimerEvent;	import flash.media.SoundTransform;	import flash.media.Video;	import flash.net.NetConnection;	import flash.net.NetStream;	import flash.utils.Timer;	/**	 * <p><b>Author:</b> Romuald Quantin - <a href="http://www.soundstep.com/" target="_blank">www.soundstep.com</a><br/>     * <p><b>Information:</b><br/>     * Blog page - <a href="http://www.soundstep.com/blog/downloads/somaui/" target="_blank">SomaUI</a><br/>     * How does it work - <a href="http://www.soundstep.com/somaprotest/" target="_blank">Soma Protest</a><br/>     * Project Host - <a href="http://code.google.com/p/somamvc/" target="_blank">Google Code</a><br/>     * Documentation - <a href="http://www.soundstep.com/blog/source/somaui/docs/" target="_blank">Soma ASDOC</a><br/>     * <b>Class version:</b> 2.0<br/>     * <b>Actionscript version:</b> 3.0</p>     * <p><b>Copyright:</b></p>     * <p>The contents of this file are subject to the Mozilla Public License<br />     * Version 1.1 (the "License"); you may not use this file except in compliance<br />     * with the License. You may obtain a copy of the License at<br /></p>     *      * <p><a href="http://www.mozilla.org/MPL/" target="_blank">http://www.mozilla.org/MPL/</a><br /></p>     *      * <p>Software distributed under the License is distributed on an "AS IS" basis,<br />     * WITHOUT WARRANTY OF ANY KIND, either express or implied.<br />     * See the License for the specific language governing rights and<br />     * limitations under the License.<br /></p>     *      * <p>The Original Code is Soma.<br />     * The Initial Developer of the Original Code is Romuald Quantin.<br />     * Initial Developer are Copyright (C) 2008-2009 Soundstep. All Rights Reserved.</p>     *      * <p><b>Usage:</b><br/>     * SomaVideo is created to display a simple video without any controller or skins (play, volume, etc), you can access to the most basic actions on a video such as play, pause, stop, volume and so on.     * <listing version="3.0">var video:SomaVideo = new SomaVideo("video/video.flv");video.addEventListener(SomaVideoEvent.METADATA_UPDATE, metadataHandler);video.addEventListener(SomaVideoEvent.PLAYHEAD_UPDATE, playheadHandler);addChild(video);private function metadataHandler(e:SomaVideoEvent):void {    trace(e.player.duration);}private function playheadHandler(e:SomaVideoEvent):void {    trace(e.player.time);}     * </listing>     *      * @see com.soma.Soma Soma     * @see com.soma.view.video.SomaVideo SomaVideo     * @see com.soma.view.video.SomaVideoPlayer SomaVideoPlayer     * @see com.soma.view.video.events.SomaVideoEvent SomaVideoEvent     */		public class SomaVideo extends Sprite {				//------------------------------------		// private, protected properties		//------------------------------------				private var _url:String;		private var _netConnection:NetConnection;		private var _stream:NetStream;		private var _video:Video;				private var _loop:Boolean;		private var _sound:SoundTransform;		private var _volume:Number;		private var _pan:Number;		private var _smoothing:Boolean;		private var _bufferTime:Number = 0.1;				private var _isPlaying:Boolean;		private var _isPaused:Boolean;				private var _metaDataClient:DataClient;		private var _metaDataObject:Object;		private var _xmpDataObject:Object;				private var _lastkeyframetimestamp:Number;		private var _creator:String;		private var _lastkeyframelocation:String;		private var _metadatacreator:String;		private var _videodatarate:Number;		private var _keyframes:Object;		private var _duration:Number;		private var _hasmetadata:Boolean;		private var _haskeyframes:Boolean;				private var _widthVideoSource:Number;		private var _heightVideoSource:Number;		private var _enableAutoResizeOnMetaData:Boolean;		private var _sizeHasBeenSet:Boolean;				private var _timer:Timer;		private var _lastTime:Number;				private var _timerPreloading:Timer;		private var _lastBytesLoaded:Number;		private var _bytesLoaded:Number;		private var _bytesTotal:Number;		private var _preloadingPercentage:Number;				private var _timerBuffer:Timer;		private var _lastBufferLength:Number;		private var _bufferLength:Number;		private var _bufferPercentage:Number;				//------------------------------------		// public properties		//------------------------------------				/** Indicates that the NetStatusEvent errors will be traced in the console (default true). */		public static var LOG_ERRORS:Boolean = true;		//------------------------------------		// constructor		//------------------------------------				/** Creates a SomaVideo Instance. 		 * @param url A String (URL) of the video to play.		 */		public function SomaVideo(url:String) {			_url = url;			init();		}		//		// PRIVATE, PROTECTED		//________________________________________________________________________________________________				/** @private */		protected function resetValues():void {			_isPlaying = false;			_isPaused = true;			_sizeHasBeenSet = false;			_enableAutoResizeOnMetaData = true;			_lastkeyframetimestamp = 0;			_creator = "";			_lastkeyframelocation = "";			_metadatacreator = "";			_videodatarate = 0;			_keyframes = {};			_duration = 0;			_lastTime = 0;			_lastBytesLoaded = 0;			_bytesLoaded = 0;			_bytesTotal = 0;			_preloadingPercentage = 0;			_timerBuffer;			_lastBufferLength = 0;			_bufferLength = 0;			_bufferPercentage = 0;		}				/** @private */		protected function init():void {			_volume = 1;			_pan = 0;			_smoothing = true;			resetValues();			initializeConnection();		}				/** @private */		private function initializeConnection():void {			_metaDataClient = new DataClient();			_netConnection = new NetConnection();			_netConnection.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);            _netConnection.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);            _netConnection.connect(null);		}				/** @private */		protected function netStatusHandler(e:NetStatusEvent):void {            switch (e.info['code']) {                case "NetConnection.Connect.Success":					dispatchEvent(new SomaVideoEvent(SomaVideoEvent.CONNECTION_SUCCESS, this, e));					connectStream();                    break;                case "NetConnection.Connect.Failed":					dispatchEvent(new SomaVideoEvent(SomaVideoEvent.CONNECTION_FAILED, this, e));					if (LOG_ERRORS) trace("Error in SomaVideo [" + name + "], connection failed");                    break;                case "NetConnection.Connect.Rejected":					dispatchEvent(new SomaVideoEvent(SomaVideoEvent.CONNECTION_REJECTED, this, e));					if (LOG_ERRORS) trace("Error in SomaVideo [" + name + "], connection rejected");                    break;                case "NetStream.Play.StreamNotFound":                	dispatchEvent(new SomaVideoEvent(SomaVideoEvent.STREAM_NOT_FOUND, this, e));                    if (LOG_ERRORS) trace("Error in SomaVideo [" + name + "], unable to locate the url: " + _url);                    break;                case "NetStream.Buffer.Empty":                	dispatchEvent(new SomaVideoEvent(SomaVideoEvent.BUFFER_EMPTY, this, e));                	bufferingStarted();                    break;                case "NetStream.Buffer.Full":                	dispatchEvent(new SomaVideoEvent(SomaVideoEvent.BUFFER_FULL, this, e));                	bufferingEnd();                    break;                case "NetStream.Buffer.Flush":                	dispatchEvent(new SomaVideoEvent(SomaVideoEvent.BUFFER_FLUSH, this, e));                    break;                case "NetStream.Play.Start":                	dispatchEvent(new SomaVideoEvent(SomaVideoEvent.STREAM_STARTED, this, e));                	bufferingStarted();                	preloadingStarted();                	videoStarted();                    break;                case "NetStream.Play.Stop":                	dispatchEvent(new SomaVideoEvent(SomaVideoEvent.STREAM_STOPPED, this, e));                	videoStopped();                	if (_loop) _stream.seek(0);                    break;                case "NetStream.Seek.Notify":                	dispatchEvent(new SomaVideoEvent(SomaVideoEvent.SEEK_NOTIFY, this, e));                    break;            }        }        		/** @private */        protected function connectStream():void {			_stream = new NetStream(_netConnection);			_stream.client = _metaDataClient;			_metaDataClient['onMetaData'] = metaDataHandler;			_metaDataClient['onXMPData'] = xmpDataHandler;			_stream.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);            _stream.addEventListener(AsyncErrorEvent.ASYNC_ERROR, asyncErrorHandler);			_stream.bufferTime = _bufferTime;			volume = _volume;			_video = new Video();            _video.attachNetStream(_stream);            _video.smoothing = _smoothing;            addChild(_video);			play();		}        		/** @private */        protected function metaDataHandler(info:Object):void {        	_metaDataObject = info;        	_lastkeyframetimestamp = _metaDataObject['lastkeyframetimestamp'];			_creator = _metaDataObject['creator'];			_lastkeyframelocation = _metaDataObject['lastkeyframelocation'];			_metadatacreator = _metaDataObject['metadatacreator'];			_videodatarate = _metaDataObject['videodatarate'];			_keyframes = _metaDataObject['keyframes'];			_duration = _metaDataObject['duration'];			_hasmetadata = _metaDataObject['hasmetadata'];			_haskeyframes = _metaDataObject['haskeyframes'];			_widthVideoSource = _metaDataObject['width'];			_heightVideoSource = _metaDataObject['height'];			if (!_sizeHasBeenSet && _enableAutoResizeOnMetaData) {				_sizeHasBeenSet = true;				_video.width = _widthVideoSource;				_video.height = _heightVideoSource;				dispatchEvent(new SomaVideoEvent(SomaVideoEvent.ORIGINAL_SIZE_UPDATED, this, null));			}			dispatchEvent(new SomaVideoEvent(SomaVideoEvent.METADATA_UPDATE, this, null));        }				/** @private */        protected function xmpDataHandler(info:Object):void {        	_xmpDataObject = info;        	dispatchEvent(new SomaVideoEvent(SomaVideoEvent.XMPDATA_UPDATE, this, null));        }        		/** @private */		protected function securityErrorHandler(e:SecurityErrorEvent):void {			if (LOG_ERRORS) trace("Error in SomaVideo [" + name + "] (securityErrorHandler): " + e);        }        		/** @private */        protected function asyncErrorHandler(e:AsyncErrorEvent):void {            if (LOG_ERRORS) trace("Error in SomaVideo [" + name + "] (asyncErrorHandler): " + e);        }        		/** @private */        protected function preloadingStarted():void {			_bytesTotal = _stream.bytesTotal;			dispatchEvent(new SomaVideoEvent(SomaVideoEvent.PRELOADING_START, this, null));			if (_timerPreloading == null) { 				_timerPreloading = new Timer(30);	    		_timerPreloading.addEventListener(TimerEvent.TIMER, timerPreloadingHandler);			}			_timerPreloading.start();        }				/** @private */        protected function timerPreloadingHandler(e:TimerEvent):void {        	_bytesLoaded = _stream.bytesLoaded;			if (_lastBytesLoaded != _bytesLoaded) {				_lastBytesLoaded = _bytesLoaded;				_preloadingPercentage = _bytesLoaded * 100 / _bytesTotal;				dispatchEvent(new SomaVideoEvent(SomaVideoEvent.PRELOADING_PROGRESS, this, null));			}			if (_bytesLoaded == _bytesTotal) {				_timerPreloading.stop();				dispatchEvent(new SomaVideoEvent(SomaVideoEvent.PRELOADING_COMPLETE, this, null));			}        }        		/** @private */        protected function bufferingStarted():void {			dispatchEvent(new SomaVideoEvent(SomaVideoEvent.BUFFERING_START, this, null));			if (_timerBuffer == null) { 				_timerBuffer = new Timer(30);	    		_timerBuffer.addEventListener(TimerEvent.TIMER, timerBufferHandler);			}			_timerBuffer.start();        }        		/** @private */        protected function timerBufferHandler(e:TimerEvent):void {			_bufferLength = _stream.bufferLength;			if (_bufferLength > _bufferTime) _bufferLength = _bufferTime;			if (_lastBufferLength != _bufferLength) {				_lastBufferLength = _bufferLength;				_bufferPercentage = _bufferLength * 100 / _bufferTime;				if (_bufferPercentage > 100) _bufferPercentage == 100;				dispatchEvent(new SomaVideoEvent(SomaVideoEvent.BUFFERING_PROGRESS, this, null));			}        }        		/** @private */        protected function bufferingEnd():void {        	_bufferLength = _stream.bufferLength;        	if (_bufferLength > _bufferTime) _bufferLength = _bufferTime;        	dispatchEvent(new SomaVideoEvent(SomaVideoEvent.BUFFERING_COMPLETE, this, null));        	if (_timerBuffer != null) _timerBuffer.stop();        }        		/** @private */        protected function videoStarted():void {        	_isPlaying = true;        	if (_timer == null) {        		_timer = new Timer(30);        		_timer.addEventListener(TimerEvent.TIMER, timerHandler);				_timer.start();			}		}        		/** @private */        protected function videoStopped():void {        	_isPlaying = false;        	_isPaused = false;        	dispatchEvent(new SomaVideoEvent(SomaVideoEvent.STOP, this, null));        }        		/** @private */        protected function timerHandler(e:TimerEvent):void {			if (_lastTime != _stream.time) dispatchEvent(new SomaVideoEvent(SomaVideoEvent.PLAYHEAD_UPDATE, this, null));			_lastTime = _stream.time;        }        		/** @private */        protected function disposeTimers():void {        	if (_timer != null) {        		_timer.stop();        		_timer.removeEventListener(TimerEvent.TIMER, timerHandler);        		_timer = null;        	}			if (_timerPreloading != null) {        		_timerPreloading.stop();        		_timerPreloading.removeEventListener(TimerEvent.TIMER, timerPreloadingHandler);        		_timerPreloading = null;        	}			if (_timerBuffer != null) {        		_timerBuffer.stop();        		_timerBuffer.removeEventListener(TimerEvent.TIMER, timerBufferHandler);        		_timerBuffer = null;        	}        }        		// PUBLIC		//________________________________________________________________________________________________				/** Call this method when you dispose a SomaVideoPlayer to remove children, event listeners or whatever that needs to be destroyed to free the memory (make the instance elligible to the Garbage Collection). */		public function dispose():void {            if (_stream != null) {            	_stream.removeEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);            	_stream.removeEventListener(AsyncErrorEvent.ASYNC_ERROR, asyncErrorHandler);            	_stream.pause();				_stream.close();				_stream = null;            }            if (_netConnection != null) {				_netConnection.removeEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);	            _netConnection.removeEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);				_netConnection.close();				_netConnection = null;            }			disposeTimers();			while (numChildren > 0) {				removeChildAt(0);			}		}				/** Set the source to play.		 * <listing version="3.0">var video:SomaVideo = new SomaVideo("video.flv");video.setSource("othervideo.flv");		 * </listing>		 * @param url A String (URL).		 */		public function setSource(url:String):void {			_url = url;			disposeTimers();			resetValues();			_stream.pause();			_stream.close();			_stream.play(_url);			_stream.pause();			_stream.seek(0);		}				/** Pause the video. */		public function pause():void {			_isPlaying = false;			_isPaused = true;			_stream.pause();			dispatchEvent(new SomaVideoEvent(SomaVideoEvent.PAUSE, this, null));		}		/** Stop the video. */		public function stop():void {			_isPlaying = false;			_isPaused = false;			_stream.pause();			_stream.seek(0);			dispatchEvent(new SomaVideoEvent(SomaVideoEvent.STOP, this, null));		}				/** Resume the video. */		public function resume():void {			_isPlaying = true;			_isPaused = false;			_stream.resume();			videoStarted();			dispatchEvent(new SomaVideoEvent(SomaVideoEvent.RESUME, this, null));		}				/** Play the video. */		public function play():void {			if (_isPaused) resume();			else {				if (_url == null || _url == "") return;				_isPlaying = true;				_stream.play(_url);				videoStarted();				dispatchEvent(new SomaVideoEvent(SomaVideoEvent.PLAY, this, null));			}		}				/** Move the video playhead to a (approximate) time. 		 * @param offset The approximate time value, in seconds, to move to in a video file. 		 */		public function seek(offset:Number):void {			_stream.seek(offset);		}				/** Get the url of the video.		 * @return A String.		 */		public function get url():String {			return _url;		}				/** Get the NetConnection instance of the video.		 * @return A NetConnection instance.		 */		public function get netConnection():NetConnection {			return _netConnection;		}				/** Get the NetStream instance of the video.		 * @return A NetStream.		 */		public function get stream():NetStream {			return _stream;		}				/** Specifies whether the video will replay on its own when it reaches the end. */		public function get loop():Boolean {			return _loop;		}				public function set loop(value:Boolean):void {			_loop = value;		}				/** Volume of the video, the range is 0 to 1 and the default is 1. */		public function get volume():Number {			return _volume;		}				public function set volume(value:Number):void {			if (value < 0) _volume = 0;			else if (value > 1) _volume = 1;			else _volume = value;			_sound = new SoundTransform(_volume, _pan);            _stream.soundTransform = _sound;            dispatchEvent(new SomaVideoEvent(SomaVideoEvent.VOLUME_CHANGED, this, null));		}				/** SoundTransform instance used for the volume and panning */		public function get sound():SoundTransform {			return _sound;		}				public function set sound(value:SoundTransform):void {			_sound = value;		}				/** Pan (panning) of the video, the range is -1 (for left) to 1 (for right) and the default is 0. */		public function get pan():Number {			return _pan;		}				public function set pan(value:Number):void {			if (value < -1) _pan = -1;			else if (value > 1) _pan = 1;			else _pan = value;			_sound = new SoundTransform(_volume, _pan);            _stream.soundTransform = _sound;		}				/** Get information about the video. 		 * @return A String.		 */		public function info():String {			var str:String = "[SomaVideo]" + name + "\n";			str += "--- url: " + url + "\n";			str += "--- loop: " + loop + "\n";			str += "--- volume: " + volume + "\n";			str += "--- pan: " + pan + "\n";			return str;		}				/** Get the Video instance used to display the video. 		 * @return A Video instance.		 */		public function get video():Video {			return _video;		}				/** Get the current position of the playhead.		 * @return A Number (seconds).		 */		public function get time():Number {			return _stream.time;		}				/** Get the time length (seconds) of the video, only available after that an event SomaVideoEvent.METADATA_UPDATE (or SomaVideoEvent.ORIGINAL_SIZE_UPDATED) has been dispatched.		 * @return A Number (seconds).		 */		public function get duration():Number {			return _duration;		}				/** Get the last keyframe timestamp, only available after that an event SomaVideoEvent.METADATA_UPDATE (or SomaVideoEvent.ORIGINAL_SIZE_UPDATED) has been dispatched.		 * @return A Number.		 */		public function get lastkeyframetimestamp():Number {			return _lastkeyframetimestamp;		}				/** Get the creator, only available after that an event SomaVideoEvent.METADATA_UPDATE (or SomaVideoEvent.ORIGINAL_SIZE_UPDATED) has been dispatched.		 * @return A String.		 */		public function get creator():String {			return _creator;		}				/** Get the last key frame location, only available after that an event SomaVideoEvent.METADATA_UPDATE (or SomaVideoEvent.ORIGINAL_SIZE_UPDATED) has been dispatched.		 * @return A String.		 */		public function get lastkeyframelocation():String {			return _lastkeyframelocation;		}				/** Get the metadata creator, only available after that an event SomaVideoEvent.METADATA_UPDATE (or SomaVideoEvent.ORIGINAL_SIZE_UPDATED) has been dispatched.		 * @return A String.		 */		public function get metadatacreator():String {			return _metadatacreator;		}				/** Get the video data rate (kbps), only available after that an event SomaVideoEvent.METADATA_UPDATE (or SomaVideoEvent.ORIGINAL_SIZE_UPDATED) has been dispatched.		 * @return A Number (kpbs, kilobits per seconds).		 */		public function get videodatarate():Number {			return _videodatarate;		}				/** Get the video keyframes, only available after that an event SomaVideoEvent.METADATA_UPDATE (or SomaVideoEvent.ORIGINAL_SIZE_UPDATED) has been dispatched.		 * @return An Object.		 */		public function get keyframes():Object {			return _keyframes;		}				/** Whether or not the video has metadata, only available after that an event SomaVideoEvent.METADATA_UPDATE (or SomaVideoEvent.ORIGINAL_SIZE_UPDATED) has been dispatched.		 * @return An Boolean.		 */		public function get hasmetadata():Boolean {			return _hasmetadata;		}				/** Whether or not the video has keyframes, only available after that an event SomaVideoEvent.METADATA_UPDATE (or SomaVideoEvent.ORIGINAL_SIZE_UPDATED) has been dispatched.		 * @return An Boolean.		 */		public function get haskeyframes():Boolean {			return _haskeyframes;		}				/** Get the metadata object received, only available after that an event SomaVideoEvent.METADATA_UPDATE (or SomaVideoEvent.ORIGINAL_SIZE_UPDATED) has been dispatched.		 * @return An Object.		 */		public function get metaDataObject():Object {			return _metaDataObject;		}				/** Get the XMP data object received, only available after that an event SomaVideoEvent.XMPDATA_UPDATE (or SomaVideoEvent.ORIGINAL_SIZE_UPDATED) has been dispatched.		 * @return An Object.		 */		public function get xmpDataObject():Object {			return _xmpDataObject;		}				/** Get the original width of the video, only available after that an event SomaVideoEvent.XMPDATA_UPDATE (or SomaVideoEvent.ORIGINAL_SIZE_UPDATED) has been dispatched.		 * @return A Number.		 */		public function get widthVideoSource():Number {			return _widthVideoSource;		}				/** Get the original height of the video, only available after that an event SomaVideoEvent.XMPDATA_UPDATE (or SomaVideoEvent.ORIGINAL_SIZE_UPDATED) has been dispatched.		 * @return A Number.		 */		public function get heightVideoSource():Number {			return _heightVideoSource;		}				/** Whether or not the Video instance (not the SomaVideo intance) will be resized when the metadata are received, default is true.<br/><br/>		 * Note: enabled or disabled will not change anything if you specified a size to the SomaVideo instance.		 */		public function get enableAutoResizeOnMetaData():Boolean {			return _enableAutoResizeOnMetaData;		}				public function set enableAutoResizeOnMetaData(value:Boolean):void {			_enableAutoResizeOnMetaData = value;		}				/** Whether or not the video is currently playing.		 * @return A Boolean. 		 */		public function get isPlaying():Boolean {			return _isPlaying;		}				/** Specifies whether the video should be smoothed (interpolated) when it is scaled. */		public function get smoothing():Boolean {			return _video.smoothing;		}				public function set smoothing(value:Boolean):void {			_smoothing = value;			_video.smoothing;		}				/** Get the bytes loaded of the video (preloading), you can get the information on a SomaVideoEvent.PRELOADING_START,  SomaVideoEvent.PRELOADING_PROGRESS and  SomaVideoEvent.PRELOADING_COMPLETE event.		 * @return A Number.		 */		public function get bytesLoaded():Number {			return _bytesLoaded;		}				/** Get the bytes total that the video will preload, you can get the information on a SomaVideoEvent.PRELOADING_START,  SomaVideoEvent.PRELOADING_PROGRESS and  SomaVideoEvent.PRELOADING_COMPLETE event.		 * @return A Number.		 */		public function get bytesTotal():Number {			return _bytesTotal;		}				/** Get the percentage of the video that is preloaded (0 to 100), you can get the information on a SomaVideoEvent.PRELOADING_START,  SomaVideoEvent.PRELOADING_PROGRESS and  SomaVideoEvent.PRELOADING_COMPLETE event.		 * @return A Number.		 */		public function get preloadingPercentage():Number {			return _preloadingPercentage;		}				/** Buffer value in seconds, the default (flash built-in default of the NetStream class) is 0.1 (tenth of a second). */		public function get bufferTime():Number {			return _bufferTime;		}				public function set bufferTime(value:Number):void {			_bufferTime = value;			_stream.bufferTime = _bufferTime;		}		/** Get the length in seconds of the buffer, the "buffer length" will reach the "buffer time" before playing the video, you can get the information on a SomaVideoEvent.BUFFERING_START,  SomaVideoEvent.BUFFERING_PROGRESS and  SomaVideoEvent.BUFFERING_COMPLETE event.		 * @return A Number.		 */		public function get bufferLength():Number {			return _bufferLength;		}				/** Get the percentage of the buffer (seconds loaded), the "buffer length" will reach the "buffer time" before playing the video, you can get the information on a SomaVideoEvent.BUFFERING_START,  SomaVideoEvent.BUFFERING_PROGRESS and  SomaVideoEvent.BUFFERING_COMPLETE event.		 * @return A Number.		 */		public function get bufferPercentage():Number {			return _bufferPercentage;		}			}}/** @private */class DataClient {	public var onMetaData:Object;	public var onXMPData:Object;}