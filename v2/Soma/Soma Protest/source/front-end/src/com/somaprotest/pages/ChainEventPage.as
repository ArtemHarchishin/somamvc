package com.somaprotest.pages {	import caurina.transitions.Tweener;	import com.soma.Soma;	import com.soma.events.PageEvent;	import com.soma.interfaces.IComplete;	import com.soma.interfaces.IPage;	import com.somaprotest.core.events.ChainEvent;	import com.somaprotest.pages.core.CanvasPage;	import flash.display.DisplayObject;	import flash.geom.Point;	/**	 * <b>Author:</b> Romuald Quantin - <a href="http://www.soundstep.com/" target="_blank">www.soundstep.com</a><br />	 * <b>Company:</b> Less Rain - <a href="http://www.lessrain.com/" target="_blank">www.lessrain.com</a><br />	 * <b>Class version:</b> 1.0<br />	 * <b>Actionscript version:</b> 3.0<br />	 * <b>Copyright:</b> 	 * <br />	 * <b>Date:</b> 18 Feb 2009<br />	 * <b>Usage:</b>	 * @example	 * <listing version="3.0"></listing>	 */		public class ChainEventPage extends CanvasPage implements IPage {		//------------------------------------		// private, protected properties		//------------------------------------				private var _asset:DisplayObject;		private var _widthPage:Number;		private var _heightPage:Number;		private var _initialPosition:Point;		//------------------------------------		// public properties		//------------------------------------								//------------------------------------		// constructor		//------------------------------------				public function ChainEventPage() {			addEventListener(PageEvent.CONTENT_PARSED, contentParsed, false, 0, true);		}		//		// PRIVATE, PROTECTED		//________________________________________________________________________________________________				protected function contentParsed(e:PageEvent = null):void {			removeEventListener(PageEvent.CONTENT_PARSED, contentParsed, false);			initVars();		}				private function initVars():void {			_asset = getAssetByID("assetTarget");			_widthPage = Soma.getInstance().container.width;			_heightPage = Soma.getInstance().container.height;			_initialPosition = new Point(_asset.x, _asset.y);		}				private function startChainEvent():void {			new ChainEvent(ChainEvent.STEP1).dispatch();		}		// PUBLIC		//________________________________________________________________________________________________				override public function transitionIn():void {			super.transitionIn();		}		override public function transitionInComplete():void {			super.transitionInComplete();			startChainEvent();		}				override public function transitionOut():void {			super.transitionOut();		}			override public function transitionOutComplete():void {			super.transitionOutComplete();		}				public function moveAsset(e:ChainEvent):void {			var targetX:Number = _asset.x;			var targetY:Number = _asset.y;			switch (e.type) {				case ChainEvent.STEP1:					targetX = _widthPage - _asset.width - 20;					break;				case ChainEvent.STEP2:					targetY = _heightPage - _asset.height - 20;					break;				case ChainEvent.STEP3:					targetX = _initialPosition.x;					break;				case ChainEvent.STEP4:					targetY = _initialPosition.y;					break;			}			Tweener.addTween(_asset, {time:1, x:targetX, y:targetY, onComplete:moveAssetComplete, onCompleteParams:[e.complete]});		}				public function moveAssetComplete(cpl:IComplete = null):void {			if (cpl != null) cpl.complete();		}			}}