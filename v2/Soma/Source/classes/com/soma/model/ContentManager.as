package com.soma.model {	import com.soma.errors.CairngormMessage;	import com.soma.errors.CairngormError;	import com.soma.Soma;	import com.soma.events.ContentEvent;	import com.soma.loader.SomaLoader;	import com.soma.loader.SomaLoaderEvent;	import com.soma.loader.SomaLoaderItem;	import com.soma.utils.SomaUtils;	import flash.events.EventDispatcher;	/**	 * <p><b>Author:</b> Romuald Quantin - <a href="http://www.soundstep.com/" target="_blank">www.soundstep.com</a><br/>     * <p><b>Information:</b><br/>     * Blog page - <a href="http://www.soundstep.com/blog/downloads/somaui/" target="_blank">SomaUI</a><br/>     * How does it work - <a href="http://www.soundstep.com/somaprotest/" target="_blank">Soma Protest</a><br/>     * Project Host - <a href="http://code.google.com/p/somamvc/" target="_blank">Google Code</a><br/>     * Documentation - <a href="http://www.soundstep.com/blog/source/somaui/docs/" target="_blank">Soma ASDOC</a><br/>     * <b>Class version:</b> 2.0<br/>     * <b>Actionscript version:</b> 3.0</p>     * <p><b>Copyright:</b></p>     * <p>The contents of this file are subject to the Mozilla Public License<br />     * Version 1.1 (the "License"); you may not use this file except in compliance<br />     * with the License. You may obtain a copy of the License at<br /></p>     *      * <p><a href="http://www.mozilla.org/MPL/" target="_blank">http://www.mozilla.org/MPL/</a><br /></p>     *      * <p>Software distributed under the License is distributed on an "AS IS" basis,<br />     * WITHOUT WARRANTY OF ANY KIND, either express or implied.<br />     * See the License for the specific language governing rights and<br />     * limitations under the License.<br /></p>     *      * <p>The Original Code is Soma.<br />     * The Initial Developer of the Original Code is Romuald Quantin.<br />     * Initial Developer are Copyright (C) 2008-2009 Soundstep. All Rights Reserved.</p>     *      * <p><b>Usage:</b><br/>     * The ContentManager class is loading (and reloading) the XML Site Definition and give access to it to the user. The first time the XML is loaded, Soma will afterwards start the second step of its initialization process.     * Some methods are available to easily retrieve XML nodes commonly used, such as the backgrounds children nodes, the base children nodes, the XML of a page and the content node of a page.<br/><br/>     * The global content manager instance is accessible using:     * <listing version="3.0">Soma.getInstance().content</listing>     * The XML Site Definition is accessible using (the XML returned is not a copy but the one that is used by all the framework, be careful with changes):     * <listing version="3.0">Soma.getInstance().content.data</listing>     * The ContentManager is using two internal commands that are not meant to be used by the user but you can listen to them.     * </p>     * <listing version="3.0">     * Soma.getInstance().addEventListener(ContentEvent.LOADED, eventHandler);     * Soma.getInstance().addEventListener(ContentEvent.UPDATED, eventHandler);     * </listing>     *      * @see com.soma.Soma Soma     * @see com.soma.events.ContentEvent ContentEvent     */		public class ContentManager extends EventDispatcher {		//------------------------------------		// private, protected properties		//------------------------------------				private static var _data:XML;				//------------------------------------		// public properties		//------------------------------------				public static var KILL_CACHE:Boolean;				public var isLoaded:Boolean;		
		//------------------------------------		// constructor		//------------------------------------				public function ContentManager() {			isLoaded = false;			KILL_CACHE = false;		}				//		// PRIVATE, PROTECTED		//________________________________________________________________________________________________				private function xmlLoaded(e:SomaLoaderEvent):void {			if (e.item.type == SomaLoader.TYPE_XML && e.item.data['id'] == "XMLSsiteDefinition") {				removeListeners();				try {					_data = new XML(e.item.file);					if (!isLoaded) {						isLoaded = true;						new ContentEvent(ContentEvent.LOADED).dispatch();					}					else new ContentEvent(ContentEvent.UPDATED).dispatch();				} catch (err:Error) {					throw new CairngormError(CairngormMessage.SOMA_XML_NOT_VALID, err.message);				}			}		}				private function xmlError(e:SomaLoaderEvent):void {			trace("Error in ContentManager (loading): ", e.errorMessage);		}				private function setListeners():void {			Soma.getInstance().loader.addEventListener(SomaLoaderEvent.COMPLETE, xmlLoaded);			Soma.getInstance().loader.addEventListener(SomaLoaderEvent.ERROR, xmlError);		}		private function removeListeners():void {			Soma.getInstance().loader.removeEventListener(SomaLoaderEvent.COMPLETE, xmlLoaded);			Soma.getInstance().loader.removeEventListener(SomaLoaderEvent.ERROR, xmlError);		}				private function getXMLURL(url:String):String {			if (KILL_CACHE) return SomaUtils.killCache(url);			else return url;		}		// PUBLIC		//________________________________________________________________________________________________				public function start(xmlFile:String):void {			if (!isLoaded) {				setListeners();				var item:SomaLoaderItem = Soma.getInstance().loader.add(getXMLURL(xmlFile), null, SomaLoader.TYPE_XML, {id:"XMLSsiteDefinition"});				item.cacheEnabled = false;				Soma.getInstance().loader.start();			}		}				public function reload(xmlFile:String):void {			if (isLoaded) {				setListeners();				var item:SomaLoaderItem = Soma.getInstance().loader.add(getXMLURL(xmlFile), null, SomaLoader.TYPE_XML, {id:"XMLSsiteDefinition"});				item.cacheEnabled = false;				Soma.getInstance().loader.start();			}		}				public function set data(data:XML):void {			_data = data;			new ContentEvent(ContentEvent.UPDATED).dispatch();		}				public function get data():XML {			return _data;		}				public function getPage(id:String):XML {			return _data..*.(name() == "page" && @id == id)[0];		}				public function getPageContent(id:String):XML {			var page:XML = getPage(id);			if (page == null) return null;			else return page['content'][0];		}				public function getBackgrounds():XMLList {			return _data..*.(name() == "backgrounds");		}				public function getBase():XMLList {			return _data..*.(name() == "base");		}
		
	}}