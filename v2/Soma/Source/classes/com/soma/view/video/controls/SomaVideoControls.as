package com.soma.view.video.controls {	import com.soma.view.video.SomaVideoPlayer;	import com.soma.view.video.skin.ISomaVideoFullscreenSkin;	import com.soma.view.video.skin.ISomaVideoMuteSkin;	import com.soma.view.video.skin.ISomaVideoPlaySkin;	import com.soma.view.video.skin.ISomaVideoTimeBarSkin;	import com.soma.view.video.skin.SomaVideoFullscreenSkin;	import com.soma.view.video.skin.SomaVideoMuteSkin;	import com.soma.view.video.skin.SomaVideoPlaySkin;	import com.soma.view.video.skin.SomaVideoTimeBarSkin;	import flash.display.DisplayObject;	import flash.display.Sprite;	import flash.utils.getQualifiedClassName;	/**	 * <p><b>Author:</b> Romuald Quantin - <a href="http://www.soundstep.com/" target="_blank">www.soundstep.com</a><br/>     * <p><b>Information:</b><br/>     * Blog page - <a href="http://www.soundstep.com/blog/downloads/somaui/" target="_blank">SomaUI</a><br/>     * How does it work - <a href="http://www.soundstep.com/somaprotest/" target="_blank">Soma Protest</a><br/>     * Project Host - <a href="http://code.google.com/p/somamvc/" target="_blank">Google Code</a><br/>     * Documentation - <a href="http://www.soundstep.com/blog/source/somaui/docs/" target="_blank">Soma ASDOC</a><br/>     * <b>Class version:</b> 2.0<br/>     * <b>Actionscript version:</b> 3.0</p>     * <p><b>Copyright:</b></p>     * <p>The contents of this file are subject to the Mozilla Public License<br />     * Version 1.1 (the "License"); you may not use this file except in compliance<br />     * with the License. You may obtain a copy of the License at<br /></p>     *      * <p><a href="http://www.mozilla.org/MPL/" target="_blank">http://www.mozilla.org/MPL/</a><br /></p>     *      * <p>Software distributed under the License is distributed on an "AS IS" basis,<br />     * WITHOUT WARRANTY OF ANY KIND, either express or implied.<br />     * See the License for the specific language governing rights and<br />     * limitations under the License.<br /></p>     *      * <p>The Original Code is Soma.<br />     * The Initial Developer of the Original Code is Romuald Quantin.<br />     * Initial Developer are Copyright (C) 2008-2009 Soundstep. All Rights Reserved.</p>     *      * <p><b>Usage:</b><br/>     * The SomaVideoControls handles default controls or an undefined number of controls added to this class. SomaVideoControls is extending a Sprite and be accessed through the "controls" property of a SomaVideoPlayer instance.<br/><br/>     * Everytime a control is added to the instance, it will layout them from left to right (and strech the time bar when the property fitToVideo is set to true). You have some properties to reach common layouts:     * <ul>     * 	<li>alignBottom: whether the controls are aligned to the bottom or to the top (default true).</li>     * 	<li>fitTovideo: whether the width of the controls will fit to the video width (set this property to false to have a complete control of the size and position), default true.</li>     * 	<li>sitOnvideo: whether the controls are on or outside the video screen (default true).</li>     * 	<li>margin: margin around the skin (default is 5).</li>     * 	<li>backgroundAlpha: background transparency of the controls (default is black).</li>     * 	<li>backgroundColor: background transparency of the controls (default is alpha 0.5.</li>     * </ul>     * The following code is reproducing how the default controls are added in the SomaVideoControls class (by default).     * <listing version="3.0">var controls:SomaVideoControls = new SomaVideoControls();controls.addControl(new SomaVideoPlaySkin());controls.addControl(new SomaVideoTimeBarSkin());controls.addControl(new SomaVideoMuteSkin());controls.addControl(new SomaVideoFullscreenSkin());var player:SomaVideoPlayer = new SomaVideoPlayer("video/video.flv", controls);addChild(player);     * </listing>     * See each default skin class link below to see examples, how to change the defaut skins and create custom skins.     * <ul>     * 	<li>Fullscreen: <a href="../skin/SomaVideoFullscreenSkin.html">SomaVideoFullscreenSkin</a></li>     * 	<li>Volume Mute: <a href="../skin/SomaVideoMuteSkin.html">SomaVideoMuteSkin</a></li>     * 	<li>Play: <a href="../skin/SomaVideoPlaySkin.html">SomaVideoPlaySkin</a></li>     * 	<li>Time Bar: <a href="../skin/SomaVideoTimeBarSkin.html">SomaVideoTimeBarSkin</a></li>     * </ul>     * Each controls is working with 2 classes, a view skin class (receiver) a controller class (sender). The controller is getting the data needed to display the skin information and send it to the skin.<br/><br/>     * For example, the default skin SomaVideoPlaySkin is receiving data from a PlayController class (com.soma.view.video.controls.PlayController).<br/><br/>     * Here is how the default controls are internally added to the SomaVideoControls instance:     * <listing version="3.0">addSkinController(PlayController, ISomaVideoPlaySkin);addSkinController(MuteController, ISomaVideoMuteSkin);addSkinController(FullscreenController, ISomaVideoFullscreenSkin);addSkinController(TimeBarController, ISomaVideoTimeBarSkin);     * </listing>     * The skin system is flexible enough to make you able to add your own controllers and skins, following some rules.     * Let's take the example that you want to build a buffer skin included in the bar, which is not built by default in a SomaVideoPlayer instance.<br/><br/>     * <b>Build your own skin class</b>     * <ul>     * 	<li>1. create a IBufferSkin interface that is extending ISomaVideoSkin.</li>     * 	<li>2. add a method to the interface that will receive buffer values from the controller (example: bufferCallBack).</li>     * 	<li>3. create a BufferSkin class that is extending Sprite and implementing IBufferSkin.</li>     * 	<li>4. add the methods required by IBufferSkin, "registerPlayer" and "dispose" from ISomaVideoSkin and your own method "bufferCallBack" from IBufferSkin.</li>     * </ul>     * <b>Build your own controller class</b>     * <ul>     * 	<li>1. create a class that is implementing ISomaVideoDisposable.</li>     * 	<li>2. the constructor must take 2 parameters, a SomaVideoPlayer instance and the skin typed IBufferSkin.</li>     * 	<li>3. add the "dispose" method required by ISomaVideoDisposable.</li>     * </ul>     * This is the skeleton structure to be accepted by the SomaVideoControl instance. You can know built the logic, as you have a SomaVideoPlayer instance in the Controller (BufferController), you can add some listeners and send the information needed to the skin class. The skin will receive them and display then the way you wish.<br/><br/>     * <b>IBufferSkin interface</b>     * <listing version="3.0">package {    import com.soma.view.video.controls.ISomaVideoSkin;        public interface IBufferSkin extends ISomaVideoSkin {                function bufferCallBack(bufferLength:Number, bufferTime:Number):void;            }}     * </listing>     * <b>BufferSkin class</b>     * <listing version="3.0">package com.somaprotest {    import com.soma.view.video.SomaVideoPlayer;    import flash.display.Sprite;    public class BufferSkin extends Sprite implements IBufferSkin {                private var _player:SomaVideoPlayer;         public function BufferSkin() {            createSkinElements();        }                private function createSkinElements():void {            // create graphic skin element here                    }                public function bufferCallBack(bufferLength:Number, bufferTime:Number):void {            // handle graphic skin elements with the data received            trace("BUFFERING > bufferLength: ", bufferLength, ", bufferTime: ", bufferTime);        }                public function registerPlayer(player:SomaVideoPlayer):void {            _player = player;        }                public function dispose():void {            // This method is internally called when you dispose a SomaVideoPlayer            // to remove children, the event listeners or whatever that needs to be            // destroyed to free the memory (make the instance elligible to the            // Garbage Collection).        }            }}     * </listing>     * <b>BufferController class</b>     * <listing version="3.0">package com.somaprotest {    import com.soma.view.video.events.SomaVideoEvent;    import com.soma.view.video.SomaVideoPlayer;    import com.soma.view.video.controls.ISomaVideoDisposable;    public class BufferController implements ISomaVideoDisposable {                private var _videoPlayer:SomaVideoPlayer;        private var _skin:IBufferSkin;                public function BufferController(videoPlayer:SomaVideoPlayer, skin:IBufferSkin) {            _videoPlayer = videoPlayer;            _skin = skin;            _videoPlayer.addEventListener(SomaVideoEvent.BUFFERING_START, eventsHandler);            _videoPlayer.addEventListener(SomaVideoEvent.BUFFERING_PROGRESS, eventsHandler);            _videoPlayer.addEventListener(SomaVideoEvent.BUFFERING_COMPLETE, eventsHandler);        }                public function eventsHandler(e:SomaVideoEvent):void {            _skin.bufferCallBack(_videoPlayer.bufferLength, _videoPlayer.bufferTime);        }        public function dispose():void {            _videoPlayer.removeEventListener(SomaVideoEvent.BUFFERING_START, eventsHandler);            _videoPlayer.removeEventListener(SomaVideoEvent.BUFFERING_PROGRESS, eventsHandler);            _videoPlayer.removeEventListener(SomaVideoEvent.BUFFERING_COMPLETE, eventsHandler);        }            }    }     * </listing>     * <b>Add the custom controller and its skin, and finally, add the skin itself.</b>     * <listing version="3.0">var controls:SomaVideoControls = new SomaVideoControls();controls.addSkinController(BufferController, IBufferSkin);controls.addControl(new BufferSkin());var player:SomaVideoPlayer = new SomaVideoPlayer("video/video.flv", controls);addChild(player);     * </listing>     * </p>     *      * @see com.soma.Soma Soma     * @see com.soma.view.video.SomaVideo SomaVideo     * @see com.soma.view.video.SomaVideoPlayer SomaVideoPlayer     * @see com.soma.view.video.events.SomaVideoEvent SomaVideoEvent     * @see com.soma.view.video.controls.SomaVideoControls SomaVideoControls     * @see com.soma.view.video.skin.SomaVideoPlaySkin SomaVideoPlaySkin     * @see com.soma.view.video.skin.SomaVideoTimeBarSkin SomaVideoTimeBarSkin     * @see com.soma.view.video.skin.SomaVideoMuteSkin SomaVideoMuteSkin     * @see com.soma.view.video.skin.SomaVideoFullscreenSkin SomaVideoFullscreenSkin     */		public class SomaVideoControls extends Sprite {		//------------------------------------		// private, protected properties		//------------------------------------				private var _videoPlayer:SomaVideoPlayer;				private var _controls:Array;		private var _controllers:Array;		private var _controllersIdentifier:Array;				private var _controlsInitialized:Boolean;				private var _controlsWidth:Number = 60;		private var _controlsHeight:Number = 20;				private var _backgroundColor:uint = 0x000000;		private var _backgroundAlpha:Number = .5;				private var _fitToVideo:Boolean = true;		private var _margin:Number = 3;		private var _alignBottom:Boolean = true;		private var _sitOnVideo:Boolean = true;				//------------------------------------		// public properties		//------------------------------------								//------------------------------------		// constructor		//------------------------------------				/** create a SomaVideoControls instance. */		public function SomaVideoControls() {			initVars();			initControllers();		}				//		// PRIVATE, PROTECTED		//________________________________________________________________________________________________				/** @private */		protected function initVars():void {			_controls = [];			_controllers = [];			_controlsInitialized = false;			_controlsWidth = 60;			_controlsHeight = 20;			_backgroundColor = 0x000000;			_backgroundAlpha = .5;			_margin = 3;		}				/** @private */		protected function initControllers():void {			_controllersIdentifier = [];			addSkinController(PlayController, ISomaVideoPlaySkin);			addSkinController(MuteController, ISomaVideoMuteSkin);			addSkinController(FullscreenController, ISomaVideoFullscreenSkin);			addSkinController(TimeBarController, ISomaVideoTimeBarSkin);		}				/** @private */		protected function createControls():void {			for (var i:int=0; i<_controls.length; i++) {				if (!isValidSkin(_controls[i])) throw new Error("Error in SomaVideoControls creating a control (" + _controls[i] + "): the control is not a valid skin, the class must implement one of the interface available in the com.soma.view.video.skin package (such as ISomaVideoPlaySkin) or a custom interface added using the method addSkinController (the skin interface must extend ISomaVideoSkin).");				ISomaVideoSkin(_controls[i]).registerPlayer(_videoPlayer);				_videoPlayer.controls.addChild(_controls[i]);				for (var j:int=0; j<_controllersIdentifier.length; j++) {					if (_controls[i] is _controllersIdentifier[j].skin) {						try {							DisplayObject(_controls[i]).name = getQualifiedClassName(_controllersIdentifier[j].skin);							var ControllerClass:Class = _controllersIdentifier[j].controller;							var controller:Object = new ControllerClass(_videoPlayer, _controls[i]);							if (!(controller is ISomaVideoDisposable)) throw new Error("Error in SomaVideoControls: the custom controller class must implement com.soma.view.video.controls.ISomaVideoDisposable.");							_controllers.push(controller);							break;						} catch (e:Error) {							if (String(e.message).indexOf("Argument count mismatch on") != -1) {								throw new Error("Error in SomaVideoControls creating a control (" + _controls[i] + "): The custom controller class constructor needs to take a SomaVideoPlayer instance as a first parameter and, a custom skin Class instance implementing an extended ISomaVideoSkin interface, example with the built-in MuteController: public function MuteController(videoPlayer:SomaVideoPlayer, skin:ISomaVideoMuteSkin).");							}							else {								throw e;							}						}					}				}			}		}				/** @private */		protected function isValidSkin(control:ISomaVideoSkin):Boolean {			for (var i:int=0; i<_controllersIdentifier.length; i++) {				if (control is _controllersIdentifier[i].skin) return true;			}			return false;		}				/** @private */		protected function drawControls():void {			// find time bar and calculation size			var posX:Number = 0;			var ctLength:int = _controls.length;			var timeBarIndex:int = -1;			var sizeAfterTimeBar:Number = 0;			for (var i:int=0;i<ctLength; i++) {				if (_controls[i] is ISomaVideoTimeBarSkin) timeBarIndex = i;				if (timeBarIndex != -1 && timeBarIndex != i) sizeAfterTimeBar += _controls[i].width;			}			for (var j:int=0; j<ctLength; j++) {				_controls[j].x = posX;				if (j == timeBarIndex) {					_controls[j].width = _controlsWidth - (_controls[j].x + sizeAfterTimeBar);				}				posX = _controls[j].x + _controls[j].width;			}			// update values			if (_controlsWidth < width) _controlsWidth = width;			if (_controlsWidth < height) _controlsWidth = height;			// background			graphics.clear();			graphics.beginFill(_backgroundColor, _backgroundAlpha);			graphics.drawRect(0, 0, _controlsWidth, _controlsHeight);			graphics.endFill();			if (_videoPlayer == null || !_fitToVideo) return;			// position			if (!_sitOnVideo) {				x = 0;				if (_alignBottom) {					_videoPlayer.video.y = 0;					y = _videoPlayer.video.y + _videoPlayer.video.height + _margin;				}				else {					y = 0;					_videoPlayer.video.y = y + _controlsHeight + _margin;				}			} else {				x = _margin;				if (_alignBottom) {					_videoPlayer.video.y = 0;					y = _videoPlayer.video.height - _controlsHeight - _margin;				}				else {					y = _margin;					_videoPlayer.video.y = 0;				}			}			if (_videoPlayer.video.height == 0) y = 0; // video not started		}		// PUBLIC		//________________________________________________________________________________________________				/** Add a control to the list, example: SomaVideoPlaySkin.		 * @param control		 */		public function addControl(control:ISomaVideoSkin):void {			if (_controlsInitialized) return;			if (!(control is DisplayObject)) throw new Error("Error in SomaVideoControls adding a control (" + control + "): the control must be a DisplayObject or a subclass of a DisplayObject (such as Sprite or MovieClip).");			_controls.push(control);		}				/** Get a control using the class.		 * @param classType A Class.		 * @return A Class typed ISomaVideoSkin.		 */		public function getControl(classType:Class):ISomaVideoSkin {			for (var i:int=0; i<_controls.length; i++) {				if (_controls[i] is classType) return _controls[i];			}			return null;		}				/** @private Internally used by a SomaVideoPlayer instance to create the default skin.  */		public function setDefaultSkin():void {			addControl(new SomaVideoPlaySkin());			addControl(new SomaVideoTimeBarSkin());			addControl(new SomaVideoMuteSkin());			addControl(new SomaVideoFullscreenSkin());		}				/** Add a controller and its skin.		 * @param controllerClass A class.		 * @param skinInterface A class.		 */		public function addSkinController(controllerClass:Class, skinInterface:Class):void {			_controllersIdentifier.push(new ControllerIdentifier(controllerClass, skinInterface));		}				/** @private Internally used by a SomaVideoPlayer instance to initializes the controls. */		public function initialize(videoPlayer:SomaVideoPlayer):void {			_videoPlayer = videoPlayer;			_controlsInitialized = true;			createControls();		}				/** Draw (layout) the controls. */		public function draw():void {			drawControls();		}				/** This method is internally called when you dispose a SomaVideoPlayer to remove children, the event listeners or whatever that needs to be destroyed to free the memory (make the instance elligible to the Garbage Collection). */		public function dispose():void {			for (var i:int=0; i<_controls.length; i++) {				_controls[i].dispose();			}			for (var j:int=0; j<_controllers.length; j++) {				if (!_controllers[j].hasOwnProperty('dispose')) throw new Error("Error in SomaVideoControls disposing a controller (" + _controllers[j] + "): the custom controller class must have a dispose function that will be called to destroy event listeners or anything, you can implement ISomaVideoDisposable.");				_controllers[j].dispose();			}			while (numChildren > 0) {				removeChildAt(0);			}		}				/** Specifies the background color of the controls (default black). */		public function get backgroundColor():uint {			return _backgroundColor;		}				public function set backgroundColor(backgroundColor:uint):void {			_backgroundColor = backgroundColor;		}				/** Specifies the background transparency of the controls (default alpha 0.5). */		public function get backgroundAlpha():Number {			return _backgroundAlpha;		}				public function set backgroundAlpha(backgroundAlpha:Number):void {			_backgroundAlpha = backgroundAlpha;		}				/** Specifies whether the width of the controls will fit to the video width (set this property		 * to false to have a complete control of the size and position), default true.		 */		public function get fitToVideo():Boolean {			return _fitToVideo;		}				public function set fitToVideo(fitToVideo:Boolean):void {			_fitToVideo = fitToVideo;		}				/** Specifies whether the controls are aligned to the bottom or to the top (default true). */		public function get alignBottom():Boolean {			return _alignBottom;		}				public function set alignBottom(alignBottom:Boolean):void {			_alignBottom = alignBottom;		}				/** Specifies whether the controls are "on" or "outside" the video screen (default true). */		public function get sitOnVideo():Boolean {			return _sitOnVideo;		}				public function set sitOnVideo(sitOnVideo:Boolean):void {			_sitOnVideo = sitOnVideo;		}				/** @private */		override public function set width(value:Number):void {			_controlsWidth = value;			if (_fitToVideo && _sitOnVideo) _controlsWidth -= (_margin << 1);			draw();		}				/** @private */		override public function get height():Number {			if (_fitToVideo && !_sitOnVideo) return super.height + _margin;			else return super.height;		}		/** @private */		override public function set height(value:Number):void {			_controlsHeight = value;			if (_fitToVideo && !_sitOnVideo) _controlsHeight += _margin;			draw();		}				/** Specifies the margin around the skin (default is 5). */		public function get margin():Number {			return _margin;		}				public function set margin(value:Number):void {			_margin = value;		}	}}/** @private */class ControllerIdentifier {	public var controller:Class;	public var skin:Class;	public function ControllerIdentifier(controller:Class, skin:Class) {		this.controller = controller;		this.skin = skin;	}}