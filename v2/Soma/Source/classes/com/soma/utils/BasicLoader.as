package com.soma.utils {	import flash.display.Loader;	import flash.display.Sprite;	import flash.events.Event;	import flash.events.IOErrorEvent;	import flash.events.ProgressEvent;	import flash.net.URLRequest;	import flash.system.LoaderContext;	import flash.text.TextField;	import flash.text.TextFieldAutoSize;	import flash.text.TextFormat;	/**     * <p><b>Author:</b> Romuald Quantin - <a href="http://www.soundstep.com/" target="_blank">www.soundstep.com</a><br/>     * <p><b>Information:</b><br/>     * Blog page - <a href="http://www.soundstep.com/blog/downloads/somaui/" target="_blank">SomaUI</a><br/>     * How does it work - <a href="http://www.soundstep.com/somaprotest/" target="_blank">Soma Protest</a><br/>     * Project Host - <a href="http://code.google.com/p/somamvc/" target="_blank">Google Code</a><br/>     * Documentation - <a href="http://www.soundstep.com/blog/source/somaui/docs/" target="_blank">Soma ASDOC</a><br/>     * <b>Class version:</b> 2.0<br/>     * <b>Actionscript version:</b> 3.0</p>     * <p><b>Copyright:</b></p>     * <p>The contents of this file are subject to the Mozilla Public License<br />     * Version 1.1 (the "License"); you may not use this file except in compliance<br />     * with the License. You may obtain a copy of the License at<br /></p>     *      * <p><a href="http://www.mozilla.org/MPL/" target="_blank">http://www.mozilla.org/MPL/</a><br /></p>     *      * <p>Software distributed under the License is distributed on an "AS IS" basis,<br />     * WITHOUT WARRANTY OF ANY KIND, either express or implied.<br />     * See the License for the specific language governing rights and<br />     * limitations under the License.<br /></p>     *      * <p>The Original Code is Soma.<br />     * The Initial Developer of the Original Code is Romuald Quantin.<br />     * Initial Developer are Copyright (C) 2008-2009 Soundstep. All Rights Reserved.</p>     *      * <p><b>Usage:</b><br/>     * BasicLoader is a utility class to load a swf file (and display a progress value in a text box centered on the screen). A LoaderContext instance can be used with the start method (set autoStart to false in the contructor).<br/><br/>     * <b>Simple example:</b>     * <listing version="3.0">addChild(new BasicLoader("Main.swf"));     * </listing>     * <b>Example with a custom textfield:</b>     * <listing version="3.0">var tf:TextFormat = new TextFormat();tf.font = "FFF Star Condensed";tf.color = 0x00CCCC;tf.size = 8;var loader:BasicLoader = new BasicLoader("Main.swf", 0x000000, "Main", false);loader.textFormat = tf;loader.embedFont = true;loader.text.autoSize = TextFieldAutoSize.NONE;loader.text.width = 75;loader.text.height = 18;addChild(loader);loader.start();     * </listing>     * </p>     *      */	public class BasicLoader extends Sprite {				//------------------------------------		// private, protected properties		//------------------------------------				private var _loader:Loader;		private var _file:String;		private var _text:TextField;		private var _textFormat:TextFormat;		private var _embedFont:Boolean;		//------------------------------------		// public properties		//------------------------------------				//------------------------------------		// constructor		//------------------------------------				/** Creates a BasicLoader instance.		 * @param file Name of the swf file to load.		 * @param textColor Color of the TextField that will display the progress value.		 * @param nameSprite Name of the swf that will be loaded.		 * @param autoStart Automatically starts.		 */		public function BasicLoader(file:String, textColor:int = 0x000000, nameSprite:String = "Main", autoStart:Boolean = true) {			_file = file;			name = nameSprite;			_text = new TextField();			_text.textColor = textColor;			_text.autoSize = TextFieldAutoSize.CENTER;			_text.selectable = false;			visible = false;			if (autoStart) start();		}		//		// PRIVATE		//________________________________________________________________________________________________				private function startHandler(e:Event):void {			update();			addChild(_text);		}				private function progressHandler(e:ProgressEvent):void {			var percent:Number = Math.round(e.bytesLoaded * 100 / e.bytesTotal);			_text.text = "Loading " + percent + "%";			update();		}				private function initHandler(e:Event):void {			update();			dispose();		}				private function errorHandler(e:IOErrorEvent):void {			trace("Error loading " + _loader.content);		}				// PUBLIC		//________________________________________________________________________________________________				/**		 * Removes TextField and listeners.		 */		public function dispose():void {			removeChild(_text);			_loader.contentLoaderInfo.removeEventListener(Event.OPEN, startHandler, false);			_loader.contentLoaderInfo.removeEventListener(ProgressEvent.PROGRESS, progressHandler, false);			_loader.contentLoaderInfo.removeEventListener(Event.INIT, initHandler, false);			_loader.contentLoaderInfo.removeEventListener(IOErrorEvent.IO_ERROR, errorHandler, false);		}				/**		 * Starts the loading (in case autoStart has been set to false in the constructor), a LoaderContext instance can be used.		 * @param loaderContext A LoaderContext instance.		 */		public function start(loaderContext:LoaderContext = null):void {			_loader = new Loader();			_loader.contentLoaderInfo.addEventListener(Event.OPEN, startHandler, false, 0, true);			_loader.contentLoaderInfo.addEventListener(ProgressEvent.PROGRESS, progressHandler, false, 0, true);			_loader.contentLoaderInfo.addEventListener(Event.INIT, initHandler, false, 0, true);			_loader.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR, errorHandler, false, 0, true);			_loader.load(new URLRequest(_file), loaderContext);			addChild(_loader);		}
		/**		 * Center the TextField instance in the middle of the screen.		 */		private function update():void {			if (stage != null) {				visible = (stage.stageWidth != 0 && stage.stageHeight != 0);				_text.x = Math.round((stage.stageWidth * .5) - (_text.width * .5));				_text.y = Math.round((stage.stageHeight * .5) - (_text.height * .5));			}		}				/**		 * Whether or not the TextField instance used to display the loading progress will use a font embedded.		 * @return A Boolean.		 */		public function get embedFont():Boolean {			return _embedFont;		}				public function set embedFont(embedFont:Boolean):void {			_embedFont = embedFont;			_text.embedFonts = true;		}				/**		 * Default TextFormat of the TextField instance used to display the loading progress.		 */		public function get textFormat():TextFormat {			return _textFormat;		}				public function set textFormat(textFormat:TextFormat):void {			_textFormat = textFormat;			_text.defaultTextFormat = _textFormat;		}				/**		 * Get the TextField instance used to display the loading progress.		 * @return A TextField instance.		 */		public function get text():TextField {			return _text;		}
				/**		 * Get the Loader instance used to process the loading.		 * @return A Loader instance.		 */
		public function get loader():Loader {			return _loader;
		}				/**		 * Get the url of the file.		 * @return A String.		 */		public function get file():String {			return _file;		}	}}