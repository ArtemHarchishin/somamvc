package com.soma.model {		import flash.text.Font;		import com.soma.events.ContentEvent;		import com.hydrotik.utils.QueueLoaderEvent;		import com.soma.Soma;		import com.soma.vo.LoaderItemVO;		import com.soma.events.LoaderEvent;		import flash.events.EventDispatcher;		import com.hydrotik.utils.QueueLoader;		/**	 * <b>Author:</b> Romuald Quantin - <a href="http://www.soundstep.com/" target="_blank">www.soundstep.com</a><br />	 * <b>Class version:</b> BETA 1.0<br />	 * <b>Actionscript version:</b> 3.0<br />	 * <b>Copyright:</b> 	 * <br />	 * <b>Date:</b> 05-2008<br />	 * <b>Usage:</b>	 * @example	 * <listing version="3.0"></listing>	 */		public class ContentManager extends EventDispatcher {		//------------------------------------		// private, protected properties		//------------------------------------				private static var _data:XML;				//------------------------------------		// public properties		//------------------------------------				public var isLoaded:Boolean;
		//------------------------------------		// constructor		//------------------------------------				public function ContentManager() {			isLoaded = false;		}				//		// PRIVATE, PROTECTED		//________________________________________________________________________________________________				private function xmlLoaded(e:QueueLoaderEvent):void {			if(e.filetype == QueueLoader.FILE_XML){				_data = new XML(e.file);				isLoaded = true;				new ContentEvent(ContentEvent.LOADED).dispatch();			}		}				// PUBLIC		//________________________________________________________________________________________________				public function start(xmlFile:String):void {			if (!isLoaded) {				Soma.getInstance().loader.queue.addEventListener(QueueLoaderEvent.ITEM_COMPLETE, xmlLoaded);				new LoaderEvent(LoaderEvent.ADD_ITEM, Soma.getInstance().loader, new LoaderItemVO(xmlFile, null, {mimeType:QueueLoader.FILE_XML})).dispatch();				new LoaderEvent(LoaderEvent.START_LOADING, Soma.getInstance().loader).dispatch();			}		}				public function showEmbeddedFonts():void {			trace("========Embedded Fonts========");			var fonts:Array = Font.enumerateFonts();			fonts.sortOn("fontName", Array.CASEINSENSITIVE);			for (var i:int = 0; i < fonts.length; i++) {				trace(fonts[i].fontName + ", " + fonts[i].fontStyle);			}		}				public function get data():XML {			return _data;		}				public function getPage(id:String):XML {			return _data..*.(name() == "page" && @id == id)[0];		}				public function getPageContent(id:String):XMLList {			return _data..*.(name() == "page" && @id == id)['content'];		}				public function getBackgrounds():XMLList {			return _data..*.(name() == "backgrounds");		}			}}