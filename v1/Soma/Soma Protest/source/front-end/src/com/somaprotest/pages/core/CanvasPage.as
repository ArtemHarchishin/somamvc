package com.somaprotest.pages.core {		import com.soma.Soma;		import com.soma.view.Page;	import com.soundstep.ui.layouts.CanvasUI;		import com.soma.interfaces.IRemovable;	import com.somaprotest.Config;	import com.soma.view.SomaText;		import com.soma.tween.SomaTween;		import flash.events.Event;		import fl.controls.ScrollBarDirection;		import fl.events.ScrollEvent;		import flash.events.MouseEvent;		import fl.controls.ScrollPolicy;		import fl.containers.ScrollPane;		/**	 * <b>Author:</b> Romuald Quantin - <a href="http://www.soundstep.com/" target="_blank">www.soundstep.com</a><br />	 * <b>Class version:</b> 1.0<br />	 * <b>Actionscript version:</b> 3.0<br />	 * <b>Copyright:</b> 	 * <br />	 * <b>Date:</b> 26 Nov 2008<br />	 * <b>Usage:</b>	 * @example	 * <listing version="3.0"></listing>	 */		public class CanvasPage extends Page implements IRemovable {				//------------------------------------		// private, protected properties		//------------------------------------				private var _canvas:CanvasUI;		private var _pane:ScrollPane;		private var _margin:Margin;		private var _title:SomaText;		private var _intro:SomaText;		private var _posY:Number;				private var _scrollWheelPosition:Number = 0;		private var _scrollWheelSpeed:Number = 7;		//------------------------------------		// public properties		//------------------------------------						//------------------------------------		// constructor		//------------------------------------				public function CanvasPage() {					}		//		// PRIVATE, PROTECTED		//________________________________________________________________________________________________				override protected function init():void {			super.init();		}				override protected function start():void {			// test if soma is initialized, in case CanvasPage is initialized from an external page			if (Soma.getInstance().initialized) initCanvas();			super.start();		}				override protected function startContent():void {			super.startContent();		}				private function initCanvas():void  {			alpha = 0;			visible = false;			_margin = Config(Soma.getInstance().config).margin;			buildCanvas();			buildContent();		}				private function buildCanvas():void {			_canvas = new CanvasUI();			_canvas.name = "CanvasUIPage";			templateContainerTarget = canvas;			_canvas.reference = Soma.getInstance().container;			_canvas.useInitialSize = true;			_canvas.properties = {top:_margin.top + 30, bottom:_margin.bottom +10, left:_margin.left, right:_margin.right};			_pane = _canvas.scrollPane;			_pane.horizontalScrollPolicy = ScrollPolicy.OFF;			_pane.mouseFocusEnabled = false; // solve a bug when you need to click twice on a html link			_pane.verticalLineScrollSize = 30;			addChild(_canvas);			_canvas.refresh();			_canvas.addEventListener(MouseEvent.MOUSE_WHEEL, mouseWheelHandler, true);			_canvas.addEventListener(ScrollEvent.SCROLL, scrollHandler, true);		}				private function mouseWheelHandler(e:MouseEvent):void {			// as the ScrollPane calculation of the vertical scroll position is wrong			// we stop the mouseWheel event to recalculate it			e.stopImmediatePropagation();			// calculate new position			_scrollWheelPosition = Math.max(0, Math.min(_pane.maxVerticalScrollPosition, _scrollWheelPosition + (e.delta * _scrollWheelSpeed * -1)));			// redispatch the scroll event with the right values			_pane.dispatchEvent(new ScrollEvent(ScrollBarDirection.VERTICAL, e.delta, _scrollWheelPosition));			// update the vertical scrollbar 			_pane.verticalScrollBar.scrollPosition -= e.delta * _scrollWheelSpeed;		}		private function scrollHandler(e:Event):void {			if (!(e is ScrollEvent) || e.target['parent'].parent.name != "CanvasUIPage") return;			e.stopImmediatePropagation();			switch (e['direction']) {				case ScrollBarDirection.HORIZONTAL:					SomaTween.start(_pane.content, null, {time:1, x:e['position']*-1, rounded:true});					break;				case ScrollBarDirection.VERTICAL:					SomaTween.start(_pane.content, null, {time:1, y:e['position']*-1, rounded:true});					break;			}		}		private function buildContent():void {			//title			_title = new SomaText(content.parent().title, "title");			_title.x = _margin.left;			_title.y = _margin.top;			addChild(_title);			//intro			_intro = new SomaText(content.*.(@id == "intro"), "body");			_intro.width = _canvas.width - 25;			_canvas.addChild(_intro);			_posY = _intro.height + 7;		}				// PUBLIC		//________________________________________________________________________________________________				override public function remove(e:Event = null):void {			super.remove(e);		}				override public function dispose(e:Event = null):void {			super.dispose(e);		}
		
		public function set posY(posY:Number):void {			_posY = posY;		}				public function get posY():Number {			return _posY;
		}				public function get intro():SomaText {			return _intro;		}				public function get title():SomaText {			return _title;		}				public function get margin():Margin {			return _margin;		}				public function get canvas():CanvasUI {			return _canvas;		}
		
	}}