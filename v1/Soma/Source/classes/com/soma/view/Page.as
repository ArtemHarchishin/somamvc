package com.soma.view {		import com.soma.Soma;	import com.soma.errors.CairngormMessage;		import com.soma.errors.CairngormError;	
	import com.soma.tween.SomaTween;	
	import com.soma.model.TransitionManager;		import com.soma.vo.TransitionVO;		import com.soundstep.ui.BaseUI;		import com.soma.events.PageEvent;	import com.soma.interfaces.IRemovable;	import flash.display.MovieClip;	import flash.events.Event;	import flash.display.DisplayObjectContainer;		/**	 * <b>Author:</b> Romuald Quantin - <a href="http://www.soundstep.com/" target="_blank">www.soundstep.com</a><br />	 * <b>Class version:</b> BETA 1.0<br />	 * <b>Actionscript version:</b> 3.0<br />	 * <b>Copyright:</b> 	 * <br />	 * <b>Date:</b> 05-2008<br />	 * <b>Usage:</b>	 * @example	 * <listing version="3.0"></listing>	 */	 
	public class Page extends MovieClip implements IRemovable {		//------------------------------------		// private, protected properties		//------------------------------------				private var _displayDispatched:Boolean;		private var _removeDispatched:Boolean;		private var _willBeRemoved:Boolean;				//------------------------------------		// public properties		//------------------------------------				public var id:String;		public var pageXML:XML;		public var baseUI:BaseUI;		public var template:Template;		public var templateContainerTarget:DisplayObjectContainer;		public var content:XMLList;		public var type:String;		public var depth:int;				//------------------------------------		// constructor		//------------------------------------				public function Page() {			baseUI = new BaseUI(this);			baseUI.reference = Soma.getInstance().referenceBaseUI;			_displayDispatched = false;			_willBeRemoved = false;			addEventListener(Event.ADDED_TO_STAGE, added, false, 0, true);		}				//		// PRIVATE, PROTECTED		//________________________________________________________________________________________________				protected function added(e:Event):void {			init();		}				protected function init():void {			removeEventListener(Event.ADDED_TO_STAGE, added, false);			if (Soma.getInstance().initialized) {				if (id == null) throw new CairngormError(CairngormMessage.PAGE_ID_NOT_FOUND);				pageXML = Soma.getInstance().content.getPage(id);				if (content == null) content = Soma.getInstance().content.getPageContent(id);			}			if (!_willBeRemoved) start();		}				protected function start():void {			if (Soma.getInstance().initialized) {				var transition:TransitionVO = Soma.getInstance().transition.getTransition(TransitionManager.SHOW_PAGE);				if (pageXML.hasOwnProperty("@template")) {					startTemplate();				}				else {					transition.vars['onComplete'] = endStart;				}				if (!_willBeRemoved) SomaTween.start(this, TransitionManager.SHOW_PAGE);			}		}				protected function startTemplate():void {			if (!_willBeRemoved && Soma.getInstance().initialized) {				if (templateContainerTarget == null) templateContainerTarget = this;				var TemplateClass:Class = Soma.getInstance().config.getClass(pageXML.@template);				template = new TemplateClass(this, templateContainerTarget);				template.start();			}		}		private function endStart(e:Event = null):void {			if (!_willBeRemoved) { 				if (!_displayDispatched) dispatchDisplay();				startContent();			}		}				protected function startContent():void {					}				protected function dispatchDisplay():void {			if (!_willBeRemoved) {				_displayDispatched = true;				new PageEvent(PageEvent.PAGE_DISPLAYED, id).dispatch();			}		}				protected function dispatchRemove():void {			_removeDispatched = true;			new PageEvent(PageEvent.PAGE_REMOVED, id).dispatch();		}				// PUBLIC		//________________________________________________________________________________________________				public function templateDisplayed():void {			if (!_displayDispatched) dispatchDisplay();		}		public function templateRemoved():void {			dispose();		}		public function remove(e:Event = null):void {			_willBeRemoved = true;			if (template != null) template.remove();			else {				var transition:TransitionVO = Soma.getInstance().transition.getTransition(TransitionManager.HIDE_PAGE);				transition.vars['onComplete'] = dispose;				SomaTween.start(this, TransitionManager.HIDE_PAGE);			}		}				public function dispose(e:Event = null):void {			if (!_removeDispatched) {				dispatchRemove();			}		}				public function get willBeRemoved():Boolean {			return _willBeRemoved;		}	}}