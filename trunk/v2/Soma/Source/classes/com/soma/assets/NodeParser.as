package com.soma.assets {	import com.soma.Soma;	import com.soma.events.ParserEvent;	import com.soma.interfaces.IDisposable;	import com.soma.interfaces.ILibrary;	import com.soma.loader.SomaLoader;	import com.soma.loader.SomaLoaderEvent;	import com.soma.utils.SomaUtils;	import com.soundstep.ui.BaseUI;		import flash.display.DisplayObject;	import flash.display.DisplayObjectContainer;	import flash.display.Sprite;	import flash.events.EventDispatcher;	import flash.utils.Dictionary;			/** Indicates when properties from a XML node are about to be applied to the asset.     * @eventType com.soma.events.ParserEvent.WILL_SET_PROPERTIES */	[Event(name="WILL_SET_PROPERTIES", type="com.soma.events.ParserEvent.WILL_SET_PROPERTIES")]		/** Indicates when BaseUI properties from a XML node are about to be applied to the asset.     * @eventType com.soma.events.ParserEvent.WILL_SET_BASEUI_PROPERTIES */	[Event(name="WILL_SET_BASEUI_PROPERTIES", type="com.soma.events.ParserEvent.WILL_SET_BASEUI_PROPERTIES")]		/** Indicates that the NodeParser is about to parse the XML nodes.     * @eventType com.soma.events.ParserEvent.WILL_PARSE */	[Event(name="WILL_PARSE", type="com.soma.events.ParserEvent.WILL_PARSE")]		/** Indicates that the NodeParser instance is about to load external assets.     * @eventType com.soma.events.ParserEvent.WILL_LOAD */	[Event(name="WILL_LOAD", type="com.soma.events.ParserEvent.WILL_LOAD")]		/** Indicates when an external asset has been loaded (other assets are returned in an array by the run method).     * @eventType com.soma.events.ParserEvent.ASSET_LOADED */	[Event(name="ASSET_LOADED", type="com.soma.events.ParserEvent.ASSET_LOADED")]		/** Indicates when the parser has finished parsing, creating and loading assets.     * @eventType com.soma.events.ParserEvent.COMPLETE */	[Event(name="COMPLETE", type="com.soma.events.ParserEvent.COMPLETE")]		/**     * <p><b>Author:</b> Romuald Quantin - <a href="http://www.soundstep.com/" target="_blank">www.soundstep.com</a><br/>     * <p><b>Information:</b><br/>     * Blog page - <a href="http://www.soundstep.com/blog/downloads/somaui/" target="_blank">SomaUI</a><br/>     * How does it work - <a href="http://www.soundstep.com/somaprotest/" target="_blank">Soma Protest</a><br/>     * Project Host - <a href="http://code.google.com/p/somamvc/" target="_blank">Google Code</a><br/>     * Documentation - <a href="http://www.soundstep.com/blog/source/somaui/docs/" target="_blank">Soma ASDOC</a><br/>     * <b>Class version:</b> 2.0<br/>     * <b>Actionscript version:</b> 3.0</p>     * <p><b>Copyright:</b></p>     * <p>The contents of this file are subject to the Mozilla Public License<br />     * Version 1.1 (the "License"); you may not use this file except in compliance<br />     * with the License. You may obtain a copy of the License at<br /></p>     *      * <p><a href="http://www.mozilla.org/MPL/" target="_blank">http://www.mozilla.org/MPL/</a><br /></p>     *      * <p>Software distributed under the License is distributed on an "AS IS" basis,<br />     * WITHOUT WARRANTY OF ANY KIND, either express or implied.<br />     * See the License for the specific language governing rights and<br />     * limitations under the License.<br /></p>     *      * <p>The Original Code is Soma.<br />     * The Initial Developer of the Original Code is Romuald Quantin.<br />     * Initial Developer are Copyright (C) 2008-2009 Soundstep. All Rights Reserved.</p>     *      * <p><b>Usage:</b><br/>     * A NodeParser instance is creating assets, loading external files and applying properties dynamically from XML nodes describing each asset.<br/><br/>     * Many NodeParser instances are automatically created by Soma: in the background manager (to instantiate the nodes children of the "backgrounds" node of the XML Site definition), in the base manager (to instantiate the nodes children of the "base" node of the XML Site definition) and in the Page superclass (to instantiate the nodes children the "content" node of each page node).<br/><br/>     * All the following XML nodes can be used in these 3 places in the XML Site Definition: background node, base node, content node in any page node (<a href="http://www.soundstep.com/somaprotest/www/data/site.xml" target="_blank">Soma Protest XML Site Definition</a>).	 * <listing version="3.0">	 * private function createParser():void {        var parser:NodeParser = new NodeParser(Soma.getInstance().library);        var xml:XML = &lt;myAssets&gt;        &lt;video id="myVideo" url="video/video.flv" x="50" alpha=".5" verticalCenter="0" volume="0" /&gt;        &lt;image id="myImage" file="image.png" scaleX=".5" scaleY=".5" blendMode="multiply" ratio="ratio_in"/&gt;        &lt;bitmap id="myBitmap" linkage="AssetClassNameBitmap" x="170" y="170" blendMode="multiply" scaleX=".3" scaleY=".3"/&gt;        &lt;movieclip id="myMovieClip" linkage="AssetClassNameMovieClip" x="170" y="280" scaleX=".3" scaleY=".3"/&gt;        &lt;text id="myText" style="body" x="10" y="10" width="200"&gt;&lt;![CDATA[Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer sed massa turpis, sit amet ornare nisl.]]&gt;&lt;/text&gt;        &lt;xml id="myXML" file="sample.xml"/&gt;    &lt;/myAssets&gt;;        parser.add(xml.children());        // you can also use a single XML node to add an asset to the parser instance:    //parser.add(new XML ('&lt;xml id="myXML" file="data/sample.xml"/&gt;'));        // this implies that you have created a CircleSimple class (class instantiated)    // an IAsset class CircleAsset (class that instantiates CircleSimple)    // and that you have added it to the Library used by the parser, example:    // Soma.getInstance().config.registerClass(CircleSimple);    // Soma.getInstance().library.registerAsset("circleParam", CircleAsset);    // See the Soma Protest code source to find an example.    //parser.add(new XML ('&lt;circle id="myCustomAsset" classname="CircleSimple" width="100" height="100" alpha=".5" right="10" bottom="10"/&gt;'));         parser.addEventListener(ParserEvent.WILL_PARSE, events);    parser.addEventListener(ParserEvent.WILL_LOAD, events);    parser.addEventListener(ParserEvent.WILL_SET_PROPERTIES, events);    parser.addEventListener(ParserEvent.WILL_SET_BASEUI_PROPERTIES, events);    parser.addEventListener(ParserEvent.ASSET_LOADED, events);    parser.addEventListener(ParserEvent.COMPLETE, events);    var myAssets:Array = parser.run(this, Soma.getInstance().baseUI, Soma.getInstance().loader);    trace(myAssets);}private function events(e:ParserEvent):void {    trace("Event received: ", e);    if (e.type == ParserEvent.COMPLETE) e.parser.dispose();}	 * </listing>	 * A custom asset example can be found in the Library documentation (link below).     * </p>     *      * @see com.soma.assets.Library Library     * @see com.soma.assets.NodeParser NodeParser     * @see com.soma.assets.AssetFactory AssetFactory     * @see com.soma.assets.BitmapAsset BitmapAsset     * @see com.soma.assets.MovieClipAsset MovieClipAsset     * @see com.soma.assets.TextAsset TextAsset     * @see com.soma.assets.VideoAsset VideoAsset     * @see com.soma.interfaces.IAsset IAsset     * @see com.soma.interfaces.ILibrary ILibrary     */		public class NodeParser extends EventDispatcher implements IDisposable {		//------------------------------------		// private, protected properties		//------------------------------------				// library instance passed in the constructor		private var _library:ILibrary;		// XML nodes added in the NodeParser instance		private var _nodes:Array;		// target where the instantiated assets will be added		private var _target:DisplayObjectContainer;		// BaseUI instance used if BaseUI properties have been found in the XML nodes		private var _baseUI:BaseUI;		// SomaLoader instance used if external assets have been found in the XML nodes		private var _loader:SomaLoader;		// factory that creates assets		private var _assetFactory:AssetFactory;				// list of external assets to create		private var _itemToCreate:Dictionary;		// number of external assets to create		private var _countItemToCreate:int;				//------------------------------------		// public properties		//------------------------------------								//------------------------------------		// constructor		//------------------------------------				/** Creates a NodeParser instance.		 * @param library instance of Library class that can contains custom assets, the global Soma library is accessible using Soma.getInstance().library.		 */		public function NodeParser(library:ILibrary) {			_library = library;			init();		}				//		// PRIVATE, PROTECTED		//________________________________________________________________________________________________				// initializxe default values		private function init():void {			_assetFactory = new AssetFactory();			removeAll();		}				// parse nodes 		private function process():Array {			var arr:Array = [];			var length:int = _nodes.length;			var hasExternalAssets:Boolean = false;			for (var i:int=0; i<length; i++) {				var node:XML = _nodes[i];				var nodeName:String = String(node.name());				_itemToCreate[String(node.@file)] = i;				if (_library.getAsset(nodeName) != null) {					// asset found in library					var object:DisplayObject = _assetFactory.create(nodeName, node, _baseUI);					object.name = node.@id;					_target.addChild(object);					arr.push(object);					_countItemToCreate++;				} else {					// asset not found in library					switch (nodeName) {						case "image":							if (!node.hasOwnProperty("@file")) throw new Error("Error in NodeParser, attempt to instantiate an external image assets and the attribute file is missing. Node name: " + nodeName + "(id: " + node.@id + ")");							if (_loader == null) throw new Error("Error in NodeParser, attempt to load an external image and no LoaderManager instance has been passed in the method nodeparser.run. Node name: " + nodeName + "(id: " + node.@id + ")");							hasExternalAssets = true;							var sprite:Sprite = new Sprite();							sprite.name = node.@id;							_target.addChild(sprite);							arr.push(sprite);							_loader.add(node.@file, sprite, null, {id:node.@id, node:node});							break;						case "xml":							if (!node.hasOwnProperty("@file")) throw new Error("Error in NodeParser, attempt to load an XML and the attribute file is missing. Node name: " + nodeName + "(id: " + node.@id + ")");							if (_loader == null) throw new Error("Error in NodeParser, attempt to load an XML file and no LoaderManager instance has been passed in the method nodeparser.run. Node name: " + nodeName + "(id: " + node.@id + ")");							hasExternalAssets = true;							_loader.add(node.@file, sprite, null, {id:node.@id, node:node});							break;						default:							if (!node.hasOwnProperty("@classname")) throw new Error("Error in NodeParser, attempt to instantiate a custom class and the attribute classname is missing. Node name: " + nodeName + "(id: " + node.@id + ")");							var CustomClass:Class = Soma.getInstance().getClass(node.@classname);							if (CustomClass == null) throw new Error("Error in NodeParser, attempt to instantiate a class that has not been found: " + node.@classname + " If your class exists, you probably need to import it using Soma.getInstance().config.registerClass(), or create a reference in the code that will tell the compiler to import the class, example: var importClass:MyClass = null. Node name: " + nodeName + "(id: " + node.@id + ")");							var customObject:DisplayObject = new CustomClass();							customObject.name = node.@id;							doSetProperties(customObject, node);							if (_baseUI != null) doSetBaseUIProperties(customObject, _baseUI, node);							_target.addChild(customObject);							arr.push(customObject);							_countItemToCreate++;							break;					}				}			}			if (hasExternalAssets) {				var event:ParserEvent = new ParserEvent(ParserEvent.WILL_LOAD, this, null, null, true, true);				dispatchEvent(event);				if (!event.isDefaultPrevented()) {					_loader.addEventListener(SomaLoaderEvent.COMPLETE, itemComplete);					_loader.addEventListener(SomaLoaderEvent.QUEUE_CHANGED, queueChanged);					_loader.start();				}			}			else parserComplete();			return arr;		}				// apply properties (can be default prevented)		private function doSetProperties(target:Object, node:XML, exception:Array = null):void {			var event:ParserEvent = new ParserEvent(ParserEvent.WILL_SET_PROPERTIES, this, node, target, true, true);			dispatchEvent(event);			if (!event.isDefaultPrevented()) {				SomaUtils.setProperties(target, node, exception);			}		}				// apply BaseUI properties (can be default prevented)		private function doSetBaseUIProperties(target:DisplayObject, baseUI:BaseUI, node:XML):void {			var event:ParserEvent = new ParserEvent(ParserEvent.WILL_SET_BASEUI_PROPERTIES, this, node, target, true, true);			dispatchEvent(event);			if (!event.isDefaultPrevented()) {				SomaUtils.setBaseUIProperties(target, baseUI, node);			}		}				// whether of not the url is found in the dictionary of external assets to create		private function isAnItemToCreate(url:String):Boolean {			return (_itemToCreate[url] != undefined);		}				// triggered when the SomaLoader queue changed		private function queueChanged(e:SomaLoaderEvent):void {			if (_itemToCreate != null && _loader.getLastItem() != null && _itemToCreate[_loader.getLastItem().url] != undefined) {				_countItemToCreate--;			}		}				// external asset loaded		private function itemComplete(e:SomaLoaderEvent):void {			if (isAnItemToCreate(e.item.url)) _countItemToCreate++;			else return;			if (e.item.container is DisplayObject) {				doSetProperties(e.item.container, e.item.data['node']);				if (_baseUI != null && e.item.file != undefined) {					doSetBaseUIProperties(e.item.container, _baseUI, e.item.data['node']);				}			}			dispatchEvent(new ParserEvent(ParserEvent.ASSET_LOADED, this, e.item.data['node'], e.item));			if (_countItemToCreate == _nodes.length) parserComplete();		}				// end of the parser tasks		private function parserComplete():void {			dispatchEvent(new ParserEvent(ParserEvent.COMPLETE, this));		}				// PUBLIC		//________________________________________________________________________________________________				/**		 * Add a node or a list of nodes to be parsed, instantiated and loaded if it is an external file.		 * @param node (XML) or list of nodes (XMLList)		 */		public function add(node:*):void {			if (node is XMLList) {				var length:int = XMLList(node).length();				for (var i:int=0; i<length; i++) {					if (String(node[i].@parse) != "false") _nodes.push(node[i]);				}			}			else if (node is XML) {				if (String(node.@parse) != "false") _nodes.push(node);			}			else {				throw new Error("Error in NodeParser.add, the parameter must be XML (1 node) or XMLList (list of nodes).");			}		}				/**		 * Removes a node previously added.		 * @param node XML Node		 */		public function remove(node:XML):Boolean {			var length:int = _nodes.length;			for (var i:int=0; i<length; i++) {				if (node == _nodes[i]) {					_nodes.splice(i,1);					return true;				}			}			return false;		}				/**		 * Removes a node using its position in the list.		 * @param index position of the node in a Array.		 */		public function removeByIndex(index:Number):Boolean {			if (index > _nodes.length-1) return false;			else {				_nodes.splice(index,1);				return true;			}		}				/**		 * Removes all nodes.		 */		public function removeAll():void {			_nodes = [];		}				/**		 * Whether or not the NodeParser instance contains an specific node.		 * @param node node to search in the list.		 * @return a Boolean. 		 */		public function contains(node:XML):Boolean {			var length:int = _nodes.length;			for (var i:int=0; i<length; i++) {				if (node == _nodes[i]) {					return true;				}			}			return false;		}				/**		 * Gets a copy of the Array of nodes.		 */		public function get nodes():Array {			return _nodes.concat();		}				/**		 * Print information about the nodes contained.		 * @return a string describing the content of the NodeParser instance.		 */		public function info():String {			var str:String = "[NodeParser]\n";			var length:int = _nodes.length;			for (var i:int=0; i<length; i++) {				str += "--- node: " + i + ": " + _nodes[i].toXMLString() + "\n";			}			return str;		}				/**		 * Starts the NodeParser instance to parse the XML nodes added, instantiate and load the assets.		 * @param target that will hold the assets created (example: a Sprite).		 * @param baseUI BaseUI instance that will be used if BaseUI properties have been found in the nodes.		 * @param loader SomaLoader instance that will be used if external assets have been found in the nodes.		 * @return an Array of assets created (or container for external assets). XML assets are not returned in the array, you must listen to a ParserEvent.ASSET_LOADED to get the XML data.		 */		public function run(target:DisplayObjectContainer, baseUI:BaseUI = null, loader:SomaLoader = null):Array {			_target = target;			_baseUI = baseUI;			_loader = loader;			_itemToCreate = new Dictionary(true);			_countItemToCreate = 0;			var elements:Array = [];			var event:ParserEvent = new ParserEvent(ParserEvent.WILL_PARSE, this, null, null, true, true);			dispatchEvent(event);			if (!event.isDefaultPrevented()) {				elements = process();			}			return elements;		}				/**		 * Clean the parser (remove event listeners).		 */		public function dispose():void {			if (_loader != null) {				_loader.removeEventListener(SomaLoaderEvent.COMPLETE, itemComplete);				_loader.removeEventListener(SomaLoaderEvent.QUEUE_CHANGED, queueChanged);			}			if (_assetFactory != null) _assetFactory = null;			if (_itemToCreate != null) _itemToCreate = null;		}				/**		 * Gets the library instance used.		 * @return a ILibrary type (Library instance).		 */		public function get library():ILibrary {			return _library;		}				/**		 * Gets the assets factory instance.		 * @return a AssetFactory instance.		 */		public function get assetFactory():AssetFactory {			return _assetFactory;		}				/**		 * Container target that will hold the assets created. 		 * @param target DisplayObjectContainer (Sprite, MovieClip, and so on).		 */		public function get target():DisplayObjectContainer {			return _target;		}				public function set target(target:DisplayObjectContainer):void {			_target = target;		}				/**		 * BaseUI instance that will be used if BaseUI properties have been found in a node.		 * @param baseUI instance.		 */		public function get baseUI():BaseUI {			return _baseUI;		}				public function set baseUI(baseUI:BaseUI):void {			_baseUI = baseUI;		}				/**		 * SomaLoader instance that will be used to load external assets.		 * @param loader SomaLoader instance.		 */		public function get loader():SomaLoader {			return _loader;		}				public function set loader(loader:SomaLoader):void {			_loader = loader;		}			}}