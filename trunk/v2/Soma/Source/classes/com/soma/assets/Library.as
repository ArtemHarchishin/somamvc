package com.soma.assets {	import com.soma.interfaces.ILibrary;		import flash.utils.Dictionary;			/**     * <p><b>Author:</b> Romuald Quantin - <a href="http://www.soundstep.com/" target="_blank">www.soundstep.com</a><br/>     * <p><b>Information:</b><br/>     * Blog page - <a href="http://www.soundstep.com/blog/downloads/somaui/" target="_blank">SomaUI</a><br/>     * How does it work - <a href="http://www.soundstep.com/somaprotest/" target="_blank">Soma Protest</a><br/>     * Project Host - <a href="http://code.google.com/p/somamvc/" target="_blank">Google Code</a><br/>     * Documentation - <a href="http://www.soundstep.com/blog/source/somaui/docs/" target="_blank">Soma ASDOC</a><br/>     * <b>Class version:</b> 2.0<br/>     * <b>Actionscript version:</b> 3.0</p>     * <p><b>Copyright:</b></p>     * <p>The contents of this file are subject to the Mozilla Public License<br />     * Version 1.1 (the "License"); you may not use this file except in compliance<br />     * with the License. You may obtain a copy of the License at<br /></p>     *      * <p><a href="http://www.mozilla.org/MPL/" target="_blank">http://www.mozilla.org/MPL/</a><br /></p>     *      * <p>Software distributed under the License is distributed on an "AS IS" basis,<br />     * WITHOUT WARRANTY OF ANY KIND, either express or implied.<br />     * See the License for the specific language governing rights and<br />     * limitations under the License.<br /></p>     *      * <p>The Original Code is Soma.<br />     * The Initial Developer of the Original Code is Romuald Quantin.<br />     * Initial Developer are Copyright (C) 2008-2009 Soundstep. All Rights Reserved.</p>     *      * <p><b>Usage:</b><br/>     * A library instance allows you to register special assets that have the meaning to be instantiated from a NodeParser instance and an XML node.<br/>     * The global Soma library is accessible using Soma.getInstance().library and 4 assets type are registered by default: text (SomaText), video (SomaVideo), bitmap and movieClip (from flash IDE library or SWC).<br/>      * You can register a new asset class that must implement IAsset to be instantiated by a NodeParser instance: 	 * <listing version="3.0">	 * Soma.getInstance().config.registerAsset("myAsset", MyAssetClass);	 * </listing>	 * Node example (see com.soma.assets.TextAsset for another example):<br />	 * &lt;myAsset id="myAssetID" methodSample="anyValue"/&gt;<br /><br />     * Custom asset example:     * <listing version="3.0">package com.somaprotest.assets {    import com.soma.interfaces.IAsset;    import com.soma.utils.SomaUtils;    import com.soundstep.ui.BaseUI;    import flash.display.DisplayObject;		    public class CircleAsset implements IAsset {        public function instantiate(node:XML, baseUI:BaseUI = null):DisplayObject {            var circle:CircleParam = new CircleParam(10, 0x00FF00);            circle.name = node.&#64;id;            SomaUtils.setProperties(circle, node);            if (baseUI != null) SomaUtils.setBaseUIProperties(circle, baseUI, node);             return circle;        }    }}	 * </listing>     * <listing version="3.0">package com.somaprotest.assets {    import flash.display.Sprite;    public class CircleParam extends Sprite {        public function CircleParam(radius:Number, color:uint) {            graphics.beginFill(color);            graphics.drawCircle(radius, radius, radius);        }    }}	 * </listing>	 * Library registration:      * <listing version="3.0">     * Soma.getInstance().library.registerAsset("circleParam", CircleAsset);	 * </listing>	 * And used this way in the XML:     * <listing version="3.0">     * &lt;circleParam id="myCircle" classname="CircleParam" x="10" y="10"/&gt;	 * </listing>     * </p>     *      * @see com.soma.assets.NodeParser NodeParser     * @see com.soma.assets.AssetFactory AssetFactory     * @see com.soma.interfaces.ILibrary ILibrary     */		public class Library implements ILibrary {
		//------------------------------------		// private, protected properties		//------------------------------------				// Dictionary containing the custom assets		private var _assets:Dictionary;
		//------------------------------------		// public properties		//------------------------------------								//------------------------------------		// constructor		//------------------------------------				/** Creates an Library instance, Soma has a global library accessible using Soma.getInstance().library. */		public function Library() {			init();		}				//		// PRIVATE, PROTECTED		//________________________________________________________________________________________________				/**		 * @private 		 * initializes the assets dictionary and register the built-in Soma assets.		 */		protected function init():void {			_assets = new Dictionary();			registerAsset("bitmap", BitmapAsset);			registerAsset("movieclip", MovieClipAsset);			registerAsset("text", TextAsset);			registerAsset("video", VideoAsset);			registerAsset("videoplayer", VideoPlayerAsset);		}		// PUBLIC		//________________________________________________________________________________________________				/**		 * Register a class with its name to be instantiated by a NodeParser instance from an XML node.		 * @param name name of the asset (will be used as an XML node name: &lt;myAssetName /&gt;)		 * @param asset class implementing IAsset that will instantiate the asset using an XML node.		 */		public function registerAsset(name:String, asset:Class):void {			if (_assets[name] == undefined) _assets[name] = asset;		}				/**		 * Get an asset class (IAsset) from its name, usually used by a NodeParser instance.		 * @param name Name of the class (used when register).		 * @return a Class.		 */		public function getAsset(name:String):Class {			return _assets[name];		}			}}