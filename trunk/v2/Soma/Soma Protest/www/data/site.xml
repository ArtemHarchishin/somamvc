<?xml version="1.0" encoding="UTF-8"?>
<site backgroundAlpha=".7" backgroundColor="000000" width="800" height="500" horizontalCenter="0" layout="fixed" verticalCenter="0">
    <!-- backgrounds -->
    <backgrounds>
        <image id="Background 1" file="images/backgrounds/bg0.jpg" ratio="ratio_out" alignX="center" alignY="center"/>
        <image id="Background 2" file="images/backgrounds/bg1.jpg" ratio="ratio_out" alignX="center" alignY="center"/>
        <image id="Background 3" file="images/backgrounds/bg2.jpg" ratio="ratio_out" alignX="center" alignY="center"/>
        <image id="Background 4" file="images/backgrounds/bg3.jpg" ratio="ratio_out" alignX="center" alignY="center"/>
        <image id="Background 5" file="images/backgrounds/bg4.jpg" ratio="ratio_out" alignX="center" alignY="center"/>
		<bitmap id="Background 6" linkage="Asset1" ratio="ratio_out" alignX="center" alignY="center"/>
	    <movieclip id="Background 7" linkage="Asset2" ratio="ratio_out" alignX="center" alignY="center"/>
		<video id="Background 8" url="video/video.flv" volume="0" ratio="ratio_out" alignX="center" alignY="center"/>
    	<circle id="Background 9" classname="CircleSimple" ratio="ratio_out" alignX="center" alignY="center"/>
    	<circleParam id="Background 10" ratio="ratio_out" alignX="center" alignY="center"/>
	</backgrounds>
    <!-- base -->
    <base>
    	<footer id="footer" classname="Footer" horizontalCenter="0" verticalCenter="258"/>
    </base>
    <!-- home -->
    <page background="Background 1" id="home" type="CanvasPage" urlfriendly="home">
        <title><![CDATA[Welcome to Soma Protest]]></title>
        <titleBrowser><![CDATA[Welcome]]></titleBrowser>
        <content parse="false">
            <text id="intro">
			<![CDATA[
				<p class="title">What is Soma?<br/></p>
				<p>Soma is an open source MVC Framework written in AS3 to help you to create your projects by automating common processes, such as loading, structure, pages, assets, and a lot more. You can get the sources, examples and documentation from the <a href="http://www.soundstep.com/blog/downloads/somaui/" target="_blank">SomaUI page</a> on my blog.<br/></p>
				<p class="title">What is SomaUI?<br/></p>
				<p><a href="./#/somaui/">SomaUI</a> is a AIR-Java tool that is generating sources: the draft of a Flash site based on the Soma framework, ready to use and be taken to a further development. Available for Windows, Mac and Linux, you can download it on the <a href="http://www.soundstep.com/blog/downloads/somaui/" target="_blank">SomaUI page</a> on my blog.<br/></p>
				<p class="title">What is Soma Protest?<br/></p>
				<p>Soma Protest has deux purposes, the first is providing more explanation how to use the framework Soma, and the second is providing you a site sample. Soma Protest has been built with Soma and the sources are available, you can get them and compile, see the actionscript classes, the framework, the XML and how I'm using it. The Soma Protest sources are available on the <a href="http://www.soundstep.com/blog/downloads/somaui/" target="_blank">SomaUI Page</a> on my blog.<br/></p>
				<p>You can find support, report bugs or ask new features on the <a href="http://www.soundstep.com/forum/" target="_blank">Soundstep forums</a>.<br/></p>
				<p>Happy Development.<br/></p>
				<p>Romuald</p>
			]]>
			</text>
        </content>
    </page>
	<!-- a site in 2 min -->
    <page background="Background 1" id="site2min" type="CanvasPage" urlfriendly="site-in-2-minutes">
        <title><![CDATA[A site in 2 minutes]]></title>
        <content parse="false">
            <text id="intro">
			<![CDATA[
				<p>A site can be ready to be taken to further development in 2 minutes by following these steps:<br/></p>
				<textformat indent="30">
					<p>1. Launch <a href="./#/somaui/">SomaUI.</a></p>
					<p>2. Create and set a new project.</p>
					<p>3. Paste this <a href="data/xml-examples/BasicSite.txt" target="_blank">XML Site Definition template</a> in the XML editor.</p>
					<p>4. Export the site.<br/></p>
				</textformat>
				<p>You can now start to develop a site on a solid structure without caring about it. You just have to open the class of a page generated and start to code!</p>
			]]>
			</text>
        </content>
    </page>
    <!-- soma basics -->
    <page background="Background 1" id="somaBasics" type="CanvasPage" urlfriendly="basics">
        <title><![CDATA[Soma Basics]]></title>
        <content parse="false">
            <text id="intro">
			<![CDATA[
				<p>Soma is a MVC (<a href="http://en.wikipedia.org/wiki/Model-view-controller" target="_blank">Model-View-Controller</a>) framework, but there is a detail very important to understand:<br/></p>
				<p>Soma is not ONLY a MVC Framework.<br/></p>
				<p>Soma has been built to "work" for you, to handle common development you need in most of the website you're building, such as deep-linking, loading, backgrounds, page management, content management, assets, loader, loading, menu, contextual menu, structure, styles, etc...<br/></p>
				<p>All those "managers" are internally included in Soma, centralized and ready to use. The framework will handle most of those redundant and annoying development and give a body (or a skeleton) to work with.<br/></p>
				<p>I like to call Soma an invisible framework, as you can fully use the MVC way even used in its internal building, or completely avoid it and build your site your way. In other words, you dont need to know how a MVC Framework works to use Soma.<br/></p>
				<p>Soma does not have a new "design philosophy" but has been built upon the heart of another MVC framework: <a href="http://opensource.adobe.com/wiki/display/cairngorm/" target="_blank">Cairngorm</a>.<br/></p>
				<p>I've made this choice because I want Soma to be "easy-accessed" and even if Cairngorm is originally a Flex framework, I believe its syntax, event-based system and "design philosophy" are closer to what a Flash user could expect. When I say Flash user, I mean also actionscript developer beginner, not only seasoned developers.<br/></p>
				<p>Soma is sharing only some parts with Cairngorm (only few files changed to work with Flash): the event dispatcher sytem and syntax, the command system, the controller system and the error system. The "Soma heart" might changed one day in a major release if I find or write something that I think is better for the Soma users.<br/></p>
				<p>You can now visit this site and understand how Soma works. Don't forget, to make your life easier, you also have a tool to generate a good draft to work on: <a href="./#/somaui/">SomaUI</a></p>
			]]>
			</text>
        </content>
        <page background="Background 1" id="startSoma" type="StartSoma" urlfriendly="start-soma">
            <title><![CDATA[Start Soma]]></title>
            <content parse="false">
                <text id="intro">
				<![CDATA[
					<p>To start Soma (initialization), it will take only one line in your Main class (Document Class).<br/></p>
					<p>To be able to do that, Soma needs 3 requirements:<br/></p>
					<textformat indent="30">
						<p>The Document Class</p>
						<p>The <a href="./#/basics/start-soma/xml/">XML Site Definition</a> (XML file)</p>
						<p>The <a href="./#/basics/start-soma/config/">Config file</a> (Actionscript file)<br/></p>
					</textformat>
					<p class="code">Soma.getInstance().start(this, "data/site.xml", new Config());<br/></p>
					<p>Soma is initializing all the managers and variables needed to make the system working properly, this initializing process is cut in 2 parts. The first part before the loading of the XML Site Definition, and the second part after:<br/></p>
					<textformat indent="30">
						<p>1. Soma start</p>
						<p>2. initialize managers and create containers</p>
						<p>3. give order to ContentManager to load the <a href="./#/basics/start-soma/xml/">XML Site Definition</a></p>
						<p>4. dispatch ContentEvent.LOADED (from ContentManager)</p>
						<p>5. initialize managers that need the <a href="./#/basics/start-soma/xml/">XML Site Definition</a></p>
						<p>6. dispatch SomaEvent.INITIALIZED<br/></p>
					</textformat>
					<p>It is important to understand that Soma could be called an "empty layout manager", it is made to work with any kind of design. Soma is creating empty sprites that will be filled with the user settings (XML and code). For example, a background Sprite that will contains the backgrounds set in the XML Site Definition, or a page Sprite that will contains all your pages. Even the pages created are empty Sprite, the page manager decide what, when and how to show those pages.<br/></p>
					<p>During this initialization process, Soma creates the containers needed, see the structure created:</p>
				]]>
				</text>
				<image id="somaContainers" external="true" path="images/assets/" file="containers.png"/>
				<text id="text1">
				<![CDATA[
					<p>You can access them with the following syntax:<br/></p>
					<textformat indent="30">
						<p>The Document Class: <span class="code">Soma.getInstance().ui</span></p>
						<p>The backgrounds container: <span class="code">Soma.getInstance().background.container</span></p>
						<p>The base container: <span class="code">Soma.getInstance().base.container</span></p>
						<p>The site container: <span class="code">Soma.getInstance().container</span></p>
						<p>The pages container: <span class="code">Soma.getInstance().page.container</span></p>
						<p>Your Menu class: <span class="code">Soma.getInstance().menu.getMainMenu()</span></p>
						<p>Your Loading class: <span class="code">Soma.getInstance().loader.loading</span><br/></p>
					</textformat>
					<p>Add an event listener to know when Soma is fully initialized:<br/></p>
					<textformat indent="30">
						<p class="code">Soma.getInstance().addEventListener(SomaEvent.INITIALIZED, somaInitializedHandler);</p>
						<p class="code">Soma.getInstance().start(this, "data/site.xml", new Config());</p>
					</textformat>
				]]>
				</text>
            </content>
            <page background="Background 1" id="reqXML" type="CanvasPage" urlfriendly="xml">
                <title><![CDATA[XML site definition]]></title>
                <content parse="false">
                    <text id="intro">
					<![CDATA[
						<p>Soma is working hand-to-hand with what I call the "XML Site Definition", this XML is describing the structure of your site. Even more than only structure, you can <a href="./#/assets/">describe content</a> and <a href="./#/baseui/">behavior</a>.<br/></p>
						<p>You can decide how you want to load your content, Soma is not imposing anything about content and assets. However include content reference in this XML can make the development very quick and it can be usefull for language management, <a href="http://en.wikipedia.org/wiki/Web_content_management_system" target="_blank">CMS</a> or <a href="http://en.wikipedia.org/wiki/Search_engine_optimization" target="_blank">SEO</a>.<br/></p>
						<p>With <a href="./#/somaui/">SomaUI</a> is included a site project demo containing its XML Site Definition if you want to see how it looks. See the <a href="data/site.xml" target="_blank">Soma Protest XML Site Definition</a> for another example.<br/></p>
						<p>You can find how to build this file in the <a href="./#/xml/">XML Site Definition page</a>.</p>
					]]>
					</text>
                </content>
            </page>
            <page background="Background 1" id="reqConfig" type="CanvasPage" urlfriendly="config">
                <title><![CDATA[Config file]]></title>
                <content parse="false">
                    <text id="intro">
					<![CDATA[
						<p>Soma needs a Config class file that is initialized when Soma start. I give here the details but if you dont want to do it by hand, you can generate a site using <a href="./#/somaui/">SomaUI</a>, a proper Config file will also be generated in the project package (example: <span class="code">com.myproject.Config.as</span>).<br/></p>
						<p>This config file must implements <span class="code">com.soma.interfaces.IConfig</span>.<br/></p>
						<p>Implementing IConfig will force you to have the following methods in your Config class:<br/></p>
						<ul>
							<li class="code">function init():void;</li>
							<li class="code">function get siteName():String;</li>
							<li class="code">function get landingPageID():String;</li>
							<li class="code">function get loadingClass():String;</li>
							<li class="code">function get menuClass():String;<br/></li>
						</ul>
						<p>init is the function needed to initialized the Config file and will be called by Soma during the first part of the initialization process. You will need it to setup the project config variables (siteName, landingPageID, loadingClass, menuClass.<br/></p>
						<p>When Soma is initialized, the config class is accessible using <span class="code">Soma.getInstance().config</span>. It will return you an IConfig type, so if you add new properties and methods, you will need to cast it to your own. Let's say you called your Config class "MyConfig", you'll access to it this way:<br/></p>
						<textformat indent="30"><p class="code">MyConfig(Soma.getInstance().config).myProperty<br/></p></textformat>
						<p>There are 2 classes that are handled "externally" by Soma as it is usually too specific to be part of a framework, a loading class to display a loading progress and a menu class. It means you will have to build your own. Using <a href="./#/somaui/">SomaUI</a> will provide you 2 basic menu and loading classes, you can use them to start to develop your project and also as examples.<br/></p>
						<p>The siteName is the name of your project and will be used in the browser title bar.</p>
						<p>The landingPageID is the page that Soma will open the first time, it can be a Home Page for example.</p>
						<p>The loadingClass is the name of the class that will show a progress (<a href="./#/basics/external-classes/">more details</a>).</p>
						<p>The menuClass is the name of your main menu class (<a href="./#/basics/external-classes/">more details</a>).<br/></p>
						<p>Here is the <a href="../source/front-end/src/com/somaprotest/Config.as" target="_blank">Soma Protest Config file</a> (<span class="code">/source/front-end/src/com/somaprotest/Config.as</span>).</p>
					]]>
					</text>
                </content>
            </page>
        </page>
        <page background="Background 1" id="access" type="CanvasPage" urlfriendly="access">
            <title><![CDATA[How to access to Soma]]></title>
            <content parse="false">
                 <text id="intro">
					<![CDATA[
						<p>Access to Soma, or "talk to Soma", is done through a <a href="http://en.wikipedia.org/wiki/Singleton_pattern" target="_blank">Singleton pattern</a>:<br/></p>
						<textformat indent="30">
							<p class="code">import com.soma.Soma</p>
							<p class="code">Soma.getInstance()<br/></p>
						</textformat>
						<p>You can access to a list of managers:<br/></p>
						<textformat indent="30">
							<p><span class="code">Soma.getInstance().background</span> (BackgroundManager)</p>
							<p><span class="code">Soma.getInstance().base</span> (BackgroundManager)</p>
							<p><span class="code">Soma.getInstance().content</span> (ContentManager)</p>
							<p><span class="code">Soma.getInstance().loader</span> (global LoaderManager)</p>
							<p><span class="code">Soma.getInstance().menu</span> (MenuManager)</p>
							<p><span class="code">Soma.getInstance().page</span> (PageManager)</p>
							<p><span class="code">Soma.getInstance().styles</span> (StyleManager)</p>
							<p><span class="code">Soma.getInstance().library</span> (Library)</p>
							<p><span class="code">Soma.getInstance().config</span> (user config file)</p>
							<p><span class="code">Soma.getInstance().classImport</span> (ClassImport)</p>
							<p><span class="code">Soma.getInstance().container</span> (Sprite that contains the site)</p>
							<p><span class="code">Soma.getInstance().ui</span> (Document Class)</p>
							<p><span class="code">Soma.getInstance().baseUI</span> (global BaseUI)</p>
							<p><span class="code">Soma.getInstance().referenceBaseUI</span> (reference of the global BaseUI)</p>
							<p><span class="code">Soma.getInstance().currentLanguage</span> (current language)</p>
						</textformat>
					]]>
					</text>
            </content>
        </page>
        <page background="Background 1" id="commands" type="CanvasPage" urlfriendly="commands">
            <title><![CDATA[Soma Commands]]></title>
            <content parse="false">
                <text id="intro">
				<![CDATA[
					<p>A MVC Framework can have <a href="http://en.wikipedia.org/wiki/Command_pattern" target="_blank">commands</a> to "talk" to the framework, to tell the framework to execute pieces of code from internal events or user events.<br/></p>
					<p>Usually a MVC Framework does not provides anything but a "design philosophy" but Soma has built-in commands ready to use. You will obviously be able to create your own <a href="./#/custom-mvc/">custom commands</a>.<br/></p>
					<p>A command is nothing more than an event dispatched and "intercepted" by the framework to activate actions. The Soma Event super class (Cairngorm like) makes you able to dispatch the event itself. Here is an example of the creation of a PageEvent dispatching itself to show a page in Soma:<br/></p>
					<textformat indent="30">
						<p class="code">new PageEvent(PageEvent.SHOW, "myPageID").dispatch();<br/></p>
					</textformat>
					<p>You can see the dispatch method at the end of the syntax, it is nothing more than a shortcut to dispatch it.<br/></p>
					<p>Through the next pages, you'll see the Soma internal commands available and be able to see them in action.</p>
				]]>
				</text>
            </content>
			<page background="Background 1" id="cmdBackground" type="CmdBackground" urlfriendly="background">
				<title><![CDATA[Background Command]]></title>
				<content parse="false">
					<text id="intro">
					<![CDATA[
						<p>Soma can show or hide backgrounds in each pages if needed, you can set everything in the XML site Definition and Soma will take care about loading and referencing. See the <a href="./#/xml/">XML site Definition page</a> for more details.<br/></p>
						<p>You can use background commands to show or hide a background from your code using the following syntax:<br/></p>
						<textformat indent="30">
							<p class="code">import com.soma.events.BackgroundEvent;</p>
							<p class="code">new BackgroundEvent(BackgroundEvent.SHOW, "myBackgroundID").dispatch();</p>
							<p class="code">new BackgroundEvent(BackgroundEvent.HIDE, "myBackgroundID").dispatch();<br/></p>
						</textformat>
						<p>The BackgroundEvent parameter is the attribute id of the background node in the XML Site Definition. Try the following Background commands:</p>
					]]>
					</text>
					<text id="text1">
					<![CDATA[
						<p>You can access to the current background using <span class="code">Soma.getInstance().background.currentBackground</span></p>
					]]>
					</text>
					<text id="text2">
					<![CDATA[
						<p>You can hide the background using <span class="code">new BackgroundEvent(BackgroundEvent.HIDE).dispatch();</span></p>
					]]>
					</text>
					<text id="text3">
					<![CDATA[
						<p>Example with the Soma Protest background node:</p>
					]]>
					</text>
					<text id="text4">
					<![CDATA[
						<p>To show or hide a background for a specific page in the XML Site Definition:<br/></p>
						<textformat indent="30">
							<p class="code">&lt;page id="myPage" background="background 1"&gt;</p>
							<p class="code">&lt;page id="myPage" background="none"&gt;</p>
						</textformat>
					]]>
					</text>
				</content>
			</page>
            <page background="Background 1" id="cmdMenu" type="CmdMenu" urlfriendly="menu">
                <title><![CDATA[Menu commands]]></title>
                <content parse="false">
                    <text id="intro">
					<![CDATA[
						<p>The menu is an <a href="./#/basics/external-classes/">external class</a>, and has only only one command to change the state of the menu.<br/></p>
						<p>The parameter is the attribute id of the page node in the XML Site Definition you want to reach. Try the following command to randomly change the state of the menu:</p>
					]]>
					</text>
                </content>
            </page>
            <page background="Background 1" id="cmdPage" type="CanvasPage" urlfriendly="page">
                <title><![CDATA[Page commands]]></title>
                <content parse="false">
                    <text id="intro">
					<![CDATA[
						<p>The page manager in Soma is undoubtly the most complicated manager, though becoming simple via the page commands. To show a page in Soma you just have to know the page id you want to show. The parameter of the following commands is the attribute id of the page node in the <a href="./#/xml/">XML Site Definition</a>.<br/></p>
						<p>To understand how the pages are working in Soma, see the <a href="./#/page-system/">Page System page</a> for more details.<br/></p>
						<p>Command to show a page in Soma:<br/></p>
						<textformat indent="30">
							<p class="code">new PageEvent(PageEvent.SHOW, "myPageID").dispatch();<br/></p>
						</textformat>
						<p>Here is a command to show an "external link" in Soma:<br/></p>
						<textformat indent="30">
							<p class="code">new PageEvent(PageEvent.SHOW_EXTERNAL_LINK, "myExternalLink").dispatch();<br/></p>
						</textformat>
					]]>
					</text>
                </content>
            </page>
		    <page background="Background 1" id="chainEvent" type="ChainEventPage" urlfriendly="sequence">
		    	<title><![CDATA[Sequence Command]]></title>
		    	<content>
			    	 <text id="intro" parse="false">
						<![CDATA[
							<p>This page is an example how to create a sequence of commands (one command after another), it can be useful to trigger a command after another that is taking time. For example to load external data (asynchronous).<br/></p>
							<p>To simulate this sequence, I command to this asset to go on a corner using a Tween library. The command class doesn't know how long it will take, but does know what to do next. When the asset arrive to a corner, the next command (going on the next corner) is executed.<br/></p>
							<p>See the <a href="../source/front-end/src/com/somaprotest/pages/ChainEventPage.as" target="_blank">ChainEventPage</a> class and the <a href="../source/front-end/src/com/somaprotest/core/commands/ChainCommand.as" target="_blank">ChainCommand</a> class for more details.<br/></p>
						]]>
					</text>
		    		<bitmap id="assetTarget" linkage="Asset1" x="170" y="180" scaleX=".3" scaleY=".3"/>
		    	</content>
		    </page>
        </page>
        <page background="Background 1" id="events" type="CanvasPage" urlfriendly="events">
            <title><![CDATA[Soma Events]]></title>
            <content parse="false">
                <text id="intro">
					<![CDATA[
						<textformat indent="0">
							<p>The events in Soma are centralized in <span class="code">Soma.getInstance()</span>. It means to "listen to Soma", you can add event listeners straight to <span class="code">Soma.getInstance()</span>, here is a list of events you can listen to:<br/></p>
						</textformat>
						<textformat indent="30">
							<p class="code">import com.soma.events.*;<br/></p>
							<p class="code">Soma.getInstance().addEventListener(BackgroundEvent.SHOW, eventHandler);</p>
							<p class="code">Soma.getInstance().addEventListener(BackgroundEvent.HIDE, eventHandler);</p>
							<p class="code">Soma.getInstance().addEventListener(BackgroundEvent.TRANSITION_IN, eventHandler);</p>
							<p class="code">Soma.getInstance().addEventListener(BackgroundEvent.TRANSITION_OUT, eventHandler);</p>
							<p class="code">Soma.getInstance().addEventListener(ContentEvent.LOADED, eventHandler);</p>
							<p class="code">Soma.getInstance().addEventListener(ContentEvent.UPDATED, eventHandler);</p>
							<p class="code">Soma.getInstance().addEventListener(MenuEvent.OPEN_MENU, eventHandler);</p>
							<p class="code">Soma.getInstance().addEventListener(PageEvent.SHOW, eventHandler);</p>
							<p class="code">Soma.getInstance().addEventListener(PageEvent.SHOW_EXTERNAL_LINK, eventHandler);</p>
							<p class="code">Soma.getInstance().addEventListener(PageEvent.STARTED, eventHandler);</p>
							<p class="code">Soma.getInstance().addEventListener(PageEvent.TRANSITION_IN, eventHandler);</p>
							<p class="code">Soma.getInstance().addEventListener(PageEvent.TRANSITION_IN_COMPLETE, eventHandler);</p>
							<p class="code">Soma.getInstance().addEventListener(PageEvent.TRANSITION_OUT, eventHandler);</p>
							<p class="code">Soma.getInstance().addEventListener(PageEvent.TRANSITION_OUT_COMPLETE, eventHandler);</p>
							<p class="code">Soma.getInstance().addEventListener(PageEvent.EXCLUDED, eventHandler);</p>
							<p class="code">Soma.getInstance().addEventListener(PageEvent.EXCLUDED_PARENT, eventHandler);</p>
							<p class="code">Soma.getInstance().addEventListener(SomaEvent.LANGUAGE_CHANGED, eventHandler);</p>
							<p class="code">Soma.getInstance().addEventListener(SomaEvent.INITIALIZED, eventHandler);</p>
							<p class="code">Soma.getInstance().addEventListener(StyleSheetEvent.LOADED, eventHandler);<br/></p>
						<p class="code">private function eventHandler(e:Event):void {</p>
						</textfomat>
						<textformat indent="45">
							<p class="code">trace(e.type, " = ", e);</p>
						</textfomat>
						<textformat indent="30">
							<p class="code">}<br/></p>
						</textfomat>
						<textformat indent="0">
							<p class="bold">Tips:<br/></p>
							<p>If you need to, you can stop any Soma event by listening to it and then using <span class="code">event.stopImmediatePropagation();</span><br/></p>
							<p>For some of them, like <span class="code">PageEvent.STARTED</span>, you can use <span class="code">e.preventDefault();</span></p>
						</textformat>
					]]>
					</text>
            </content>
        </page>
        <page background="Background 1" id="externalClasses" type="CanvasPage" urlfriendly="external-classes">
            <title><![CDATA[External Classes]]></title>
            <content parse="false">
                <text id="intro">
				<![CDATA[
					<p>Soma has what I call "external classes", the menu and the loading (display loading progress). They are external of the framework because usually too specific in terms of behavior but also design.<br/></p>
					<p>However, Soma is working with these 2 classes and instantiates them the way it does with the pages. In the <a href="./#/basics/start-soma/config/">Config file</a> you need to reference their name to make the framework able to instantiate them. You also need to <a href="./#/basics/class-import/">force the import</a> of these classes.<br/></p>
					<p><a href="./#/somaui/">SomaUI</a> will generate a BasicLoading and BasicMenu to be able to start to develop with something. You can develop your own classes and change the reference in the Config file. As the menu can be built using the <a href="./#/xml/">XML Site Definition</a>, you can easily re-use it in another site.<br/></p>
					<p>The framework access to them with there 2 properties of the Config file:<br/></p>
					<textformat indent="30">
						<p class="code">function get menuClass():String</p>
						<p class="code">function get loadingClass():String;<br/></p>
					</textformat>
					<p class="bold">Menu class<br/></p>
					<p>To build you own menu class, you must extend <span class="code">com.soma.view.Menu</span> and implements <span class="code">com.soma.interfaces.IMenu</span>.<br/></p>
					<p>The interface IMenu has only one function to implement:<br/></p>
					<textformat indent="30">
						<p class="code">function forceMenu(id:String):void;<br/></p>
					</textformat>
					<p>This function will be called by the <a href="./#/basics/commands/menu/">Menu command</a>, and the only parameter is the id of the new page. You can then update your menu to the new state.<br/></p>
					<p class="bold">Loading class<br/></p>
					<p>The loading class is registered to a SomaLoader instance. See the <a href="http://code.google.com/p/somaloader/wiki/LoadingDisplay" target="_blank">loading display page</a> to find out how to create a loading class.<br/></p>
					<p>See the <a href="./#/somaloader/">SomaLoader</a> page for more information about the loading process in Soma.</p>
				]]>
				</text>
            </content>
        </page>
        <page background="Background 1" id="extendSoma" type="ExtendSoma" urlfriendly="extend">
            <title><![CDATA[Extend Soma]]></title>
            <content parse="false">
                <text id="intro">
				<![CDATA[
					<p>The Singleton class Soma is initializing the framework as well as asking the ContentManager to load the <a href="./#/xml/">XML Site Definition</a>. It is also the gate to talk to the framework.<br/></p>
					<p>If you need to alter its behavior, you can extend the Soma class and override the methods you need.<br/></p>
					<p>You can find below an example how to extend Soma and find a more detailed explanation about <a href="http://www.soundstep.com/blog/2008/11/01/extend-a-singleton/" target="_blank">extending a Singleton</a> on my blog.</p>
				]]>
				</text>
                <text id="text1">
				<![CDATA[
					<p>The two following syntax will not make any difference and you now have the freedom to alter the Soma initialization process.<br/></p>
					<textformat indent="30">
						<p class="code">Soma.getInstance()</p>
						<p class="code">SomaExtended.getInstance()<br/></p>
					</textformat>
				]]>
				</text>
            </content>
        </page>
        <page background="Background 1" id="classimport" type="CanvasPage" urlfriendly="class-import">
            <title><![CDATA[Classes imported]]></title>
            <content parse="false">
                <text id="intro">
				<![CDATA[
					<p>Several classes are dynamically instantiated from a String in Soma, using <span class="code">flash.utils.getDefinitionByName</span>, or <span class="code">flash.net.registerClassAlias</span> and <span class="code">flash.net.getClassByAlias</span>, such as pages and the 2 external classes handled by Soma (menu and loading).<br/></p>
					<p>Unfortunately, the compiler is not importing the classes instantiated that way, even if you import them in the code. The classes will be imported when they will be explicitly used. If they're not imported at compile-time, instantiate them will generate a run-time error.<br/></p>
					<p>The two easy and accessible solutions I know are writing <span class="code">public var myClass:MyClass = null</span> somewhere in the code. Not very useful if you have a lot of classes, the second solution is creating a SWC with FlexBuilder (or compile with compc), add the classes in the library and use the argument include-libraries with the compiler.<br/></p>
					<p>Until I find something better, that's why those classes (pages, loading, menu, and custom asset classes) must be imported in the <a href="./#/basics/start-soma/config/">Soma Config file</a> using <span class="code">Soma.getInstance().registerClass(MyClass)</span>.<br/></p>
					<p>See the <a href="../source/front-end/src/com/somaprotest/Config.as" target="_blank">Soma Protest Config file</a> (<span class="code">/source/front-end/src/com/somaprotest/Config.as</span>).</p>
				]]>
				</text>
            </content>
        </page>
    </page>
    <!-- xml -->
    <page background="Background 1" id="xmlSite" type="CanvasPage" urlfriendly="xml">
        <title><![CDATA[XML Site Definition]]></title>
        <content parse="false">
            <text id="intro">
			<![CDATA[
				<p>The XML Site Definition is an important part in Soma and can be used in many different ways. The XML will mainly describe the structure of your site, but also the content if you decide to include it. If you use <a href="./#/somaui/">SomaUI</a>, you can load some site templates, they can be a good start to build your own XML.<br/></p>
				<textformat indent="30">
					<p><a href="data/site.xml" target="_blank">Soma Protest XML</a></p>
					<p><a href="data/xml-examples/demo.txt" target="_blank">SomaUI Project Demo XML</a></p>
					<p><a href="data/xml-examples/BasicSite.txt" target="_blank">Basic Site</a></p>
					<p><a href="data/xml-examples/BasicSiteExternal.txt" target="_blank">Basic Site with External SWF</a></p>
					<p><a href="data/xml-examples/BasicSiteLiquid.txt" target="_blank">Basic Site Liquid UI<br/></a></p>
				</textformat>
				<p class="bold">The root node<br/></p>
				<p>The root node of the XML is <span class="code">&lt;site&gt;&lt;/site&gt;</span> and you can set the kind of layout you want to use: <a href="data/xml-examples/site-fixed.txt" target="_blank">fixed</a> or <a href="data/xml-examples/site-liquid.txt" target="_blank">liquid</a>. When you choose a fixed site, you can use <a href="./#/baseui/">BaseUI</a> properties in the site node to set the position. If you dont want any background for the fixed area, just set the backgroundAlpha property to 0.</span><br/></p>
				<p class="code">&lt;site backgroundAlpha=".7" backgroundColor="000000" width="800" height="500" horizontalCenter="0" layout="fixed" verticalCenter="0"&gt;<br/></p>
				<p>The site node can be composed by page nodes, a backgrounds and a base node.<br/></p>
				<p class="bold">The page node<br/></p>
				<p>The page node will describe the structure, every state that you want to show in the URL must be a page node. A page node must contain a title node and can contain other page nodes and a content node (or anything else).<br/></p>
				<p>The rules of the page nodes are:<br/></p>
				<ul>
					<li>A page node must have a unique "id" attribute through the whole XML.</li>
					<li>A page node must contain a title node.<br/></li>
				</ul>
				<p><u>Attribute id:</u><br/>The id of a page node is the parameter used in Soma when you want to show pages or menu states. The id can be whatever you want: a name, a number, etc.<br/></p>
				<p><u>Attribute urlfriendly:</u><br/>The urlfriendly is what will appear in the url of the browser, it must be without space, special characters and following the <a href="http://en.wikipedia.org/wiki/URL_normalization" target="_blank">URL normalization.</a><br/></p>
				<p><u>Node Title:</u><br/>The title node is a String used in the contextual menu, the title bar of the browser and the menu generated with <a href="./#/somaui/">SomaUI</a>. It can contains special character or anything that will be supported by your fonts.<br/></p>
				<p>Here are two basic example of page nodes: a <a href="data/xml-examples/pagenode1.txt" target="_blank">simple page node example</a> on one level and a <a href="data/xml-examples/pagenode2.txt" target="_blank">page node example on more levels</a>.<br/></p>
				<p><u>Type attribute:</u><br/>The page node can contain a type attribute, this type is the name of an actionscript class that will be instantiated by the PageManager. You will have one almost all the time to show something, but you can avoid it for example if you want to have the page appearing in the menu but not show a page when the user click on it. The name must be capitalized and you must have an actionscript class with the same name in your sources, see the <a href="./#/page-system/">page system</a> for more details.<br/></p>
				<p><a href="data/xml-examples/pagenodetype.txt" target="_blank">Example with types</a><br/></p>
				<p><u>Attribute depth:</u><br/>This attribute is taking a number (default 0 if you dont have this attribute in the node) and can be compared to the depth of the page instantiated by the PageManager. See the <a href="./#/page-system/depth/">page with depth system</a> for more details.<br/></p>
				<p><a href="data/xml-examples/pagedepth1.txt" target="_blank">Example with depths</a><br/></p>
				<p><u>Attribute exclude:</u><br/>This attribute is taking a boolean (default false if you dont have this attribute in the node). A page excluded must have a page parent with a type. See the <a href="./#/page-system/excluded/">page excluded system</a> for more details.<br/></p>
				<p><a href="data/xml-examples/pageexcluded1.txt" target="_blank">Example with page excluded</a><br/></p>
				<p><u>Attribute external:</u><br/>This attribute is taking a boolean (default false if you dont have this attribute in the node). A external page must have a type, and the type value is an SWF file name without "swf". The PageManager, instead of instantiated a new page class, will load an external SWF that have the same name. See the <a href="./#/page-system/external/">page external system</a> for more details.<br/></p>
				<p><a href="data/xml-examples/pageexternal1.txt" target="_blank">Example with external pages</a><br/></p>
				<p><u>Attribute path:</u><br/>This attribute can be used when you set an external attribute to true to load a SWF file as a page. This attribute is the path of your Movie. If the PageManager doesn't find a path attribute, it will attempt to load the Movie at the root of the deploy folder (www). See the <a href="./#/page-system/external/">page external system</a> for more details.<br/></p>
				<p><a href="data/xml-examples/pageexternal2.txt" target="_blank">Example with external pages and path</a><br/></p>
				<p><u>Attribute movieclip:</u><br/>This attribute is taking a boolean (default false if you dont have this attribute in the node). A movieclip page must have a type, and the type value is a MovieClip linkage in a Flash IDE Library (or a SWC). The PageManager, instead of instantiated a new page class, will instantiate the MovieClip. See the <a href="./#/page-system/movieclip/">page movieclip system</a> for more details.<br/></p>
				<p><a href="data/xml-examples/pagemovieclip1.txt" target="_blank">Example with movieclip pages</a><br/></p>
				<p><u>Attribute background:</u><br/>This attribute is taking the id of the child of the backgrounds node (if backgrounds have been set). This attribute will tell the PageManager that a background must be shown for this specific page. See below how to set a backgrounds node.<br/></p>
				<p><a href="data/xml-examples/pagebackgrounds.txt" target="_blank">Example with backgrounds</a><br/></p>
				<p class="bold">The content node<br/></p>
				<p>You can use a content node to describe assets in your page, this node will be parsed and Soma will try to create them. See the <a href="./#/assets/">Asset Page</a> for more explanation.<br/></p>
				<p class="bold">The backgrounds node<br/></p>
				<p>You can easily show and hide backgrounds in your project. To display a background in a specific page, here are the steps:<br/></p>
				<textformat indent="30">
					<p>1. Create a backgrounds node in the root of you XML.</p>
					<p>2. Create assets in the backgrounds node, see the <a href="./#/assets/">Asset Page</a> for more explanation about the assets.</p>
					<p>3. Use the id of a background asset in the background attribute of your page.<br/></p>
				</textformat>
				<p><a href="data/xml-examples/pagebackgrounds.txt" target="_blank">Example with backgrounds</a><br/></p>
				<p>When you need to find data in the XML anywhere in you code, you can access to the XML using <span class="code">Soma.getInstance().content.data</span> and use an E4X filter (<a href="http://www.kirupa.com/developer/flashcs3/using_xml_as3_pg1.htm" target="_blank">AS3 XML tutorial</a>). Here is an example:<br/></p>
				<p>Example to find a page node with the id:<br/></p>
				<textformat indent="30">
					<p class="code">Soma.getInstance().content.data..*.(name() == "page" && @id == "myTargetID")[0];<br/></p>
				</textformat>
			]]>
			</text>
        </content>
    </page>
    <!-- page system -->
	<page background="Background 1" id="pageSystem" type="PageSystem" urlfriendly="page-system">
		<title><![CDATA[Page System]]></title>
		<content parse="false">
			<text id="intro">
			<![CDATA[
				<p>The purposes of the page system are to making the deep-linking working (using the library <a href="http://www.asual.com/swfaddress/" target="_blank">SWFAddress</a>), but also showing a list of pages with animation between them. You need a proper XML to make the PageManager working as intended, see the <a href="./#/xml/">XML Site Definition</a>.<br/></p>
				<p>When the PageManager has to show a page, it will find the page node with the attribute id in the XML Site Definition (the id must be unique) and get the attribute type in the node. At this moment a PageEvent.STARTED event is dispatched. The type attribute is nothing more than an actionscript Class. The PageManager will dynamically instantiate this page class and then add it to the display list of the page container.<br/></p>
				<p>The pages called are added in the page sprite container display list (see the <a href="./basics/start-soma/">Soma start page</a> for more details about the containers) and removed from it when you leave the page (depending of the depth).<br/></p>
				<p><a href="./#/somaui/">SomaUI</a> has been built to generate everything you need and get a proper XML Site Definition, but here is what you have to do to create a page by hand:<br/></p>
				<textformat indent="30">
					<p>1. create a page node in the XML Site Definition.</p>
					<p>2. force the <a href="./#/basics/class-import/">class import</a> in the Config file.</p>
					<p>3. create a new class that extends <span class="code">com.soma.view.Page</span> and implements <span class="code">com.soma.interfaces.IPage</span><br/></p>
				</textformat>
				<p>See the <a href="http://www.soundstep.com/blog/source/somaui/docs/com/soma/view/Page.html" target="_blank">Page documentation</a> for more details and code examples.<br/></p>
				<p>The page super class will initialize some variables before dispatching a <span class="code">PageEvent.INITIALIZED</span> event, you can access them straight from your own page as you're going to extend this Page.<br/></p>
				<textformat indent="30">
					<p><u>id</u>: id of the page (id attribute value of the page node).</p>
					<p><u>pageXML</u>: page node (XML) of the page.</p>
					<p><u>baseUI</u>: a <a href="./#/baseui/">BaseUI</a> instance for layout purpose.</p>
					<p><u>content</u>: content node (XML) of the page, it is use by the NodeParser instance.</p>
					<p><u>type</u>: type of the page (type attribute value of the page node).</p>
					<p><u>depth</u>: depth of the page, (depth attribute value of the page node).</p>
					<p><u>parser</u>: NodeParser instance that will be used to create and load the assets found in the content node.</p>
					<p><u>parserTarget</u>: the target where the assets will be added to the display list (the page itself is the default).</p>
					<p><u>assets</u>: array containing the assets created by the NodeParser instance.<br/></p>
				</textformat>
				<p class="bold">Assets<br/></p>
				<p>A NodeParser instance is created by the page and it will look for a content node in your page node. The parser will try to instantiate and/or load any children of this content node (unless you add an attribute "parse" set to false).<br/></p>
				<p>If asset nodes have been found, the NodeParser will parse and instantiates them. The page will then dispatch a <span class="code">PageEvent.CONTENT_PARSED</span> event. If you don't have any "external assets" (such as a picture or anything that requires loading), the assets are ready to use.<br/></p>
				<p>If the node parser has found external assets, it will load them. Your assets won't be ready when you will receive the <span class="code">PageEvent.CONTENT_PARSED</span> event. When the parser will be completely finished (instantiating and loading), the page event will dispatched a <span class="code">PageEvent.CONTENT_COMPLETE</span>.<br/></p>
				<p>To receive the information, add the following listeners: <br/></p>
				<textformat indent="30">
					<p>addEventListener(addEventListener(PageEvent.CONTENT_PARSED, contentParsedHandler);</p>
					<p>addEventListener(addEventListener(PageEvent.CONTENT_COMPLETE, contentCompleteHandler);<br/></p>
				</textformat>
				<p class="bold">Show and Hide a page<br/></p>
				<p>As the PageManager can't know how you are going to show and hide your pages (and how long time it will take), it will give you the time to do that in 4 methods that must be overridden.<br/></p>
				<textformat indent="30">
					<p>showing process: transitionIn (start) and transitionInComplete (end)</p>
					<p>hiding process: transitionOut (start) and transitionOutComplete (end)<br/></p>
				</textformat>
				<p>You can show your page and/or your page elements in the overridden transitionIn method and call super.transitionIn when you are done.<br/></p>
				<textformat indent="30">
					<p class="code">override public function transitionIn():void {<br/>
					<textformat indent="60">
						// show my page and call: super.transitionIn<br/>
						Tweener.addTween(this, {time:1, _autoAlpha:1, onComplete:super.transitionIn});<br/>
					</textformat>
					}<br/><br/>
					override public function transitionInComplete():void {<br/>
					<textformat indent="60">
						// end of the transition to show the page<br/>
						super.transitionInComplete();<br/>
					</textformat>
					}<br/></p>
				</textformat>
				<p>You can hide your page and/or your page elements in the overridden transitionOut method and call super.transitionOut when you are done. Call the super methods are important as it will make the PageManager continue its process.<br/></p>
				<textformat indent="30">
					<p class="code">override public function transitionOut():void {<br/>
					<textformat indent="60">
						// hide my page and call: super.transitionOut<br/>
						Tweener.addTween(this, {time:1, _autoAlpha:0, onComplete:super.transitionOut});<br/>
					</textformat>
					}<br/><br/>
					override public function transitionOutComplete():void {<br/>
					<textformat indent="60">
						// end of the transition to hide the page, the page is about to be removed<br/>
						// use a dispose function to destroy elements and listeners<br/>
						// then call super.transitionOutComplete<br/>
						 dispose();<br/>
						super.transitionInComplete();<br/>
					</textformat>
					}<br/></p>
				</textformat>
			]]>
			</text>
			<image id="pageShowing" file="images/assets/pageshowing.png"/>
		</content>
		<page background="Background 1" id="pageDepth" type="PageDepth" urlfriendly="depth">
			<title><![CDATA[Page with Depth]]></title>
			<content parse="false">
				<text id="intro">
				<![CDATA[
					<p>You can use a depth attribute in the page node of your <a href="./#/xml/">XML Site Definition</a>. It will affect how the PageManager show the pages.<br/></p>
					<p>Let's take an example: your current page is a page depth 2 on a branch 1 of the XML, and you show a page with the same depth but in another branch. Before each of these 2 pages depth 2, you have a page depth 1 and a page depth 0. The PageManager will hide and show the pages this way:</p>
				]]>
				</text>
				<bitmap id="pageDepthImage" external="true" path="images/assets/" file="pagedepth.png"/>
				<text id="text1">
				<![CDATA[
					<p>To see see a demo, click on the children of this page in the menu.</p>
				]]>
				</text>
			</content>
			<page background="Background 1" id="page1" type="PageEmpty" urlfriendly="page1" depth="0">
				<title><![CDATA[Page 1 (depth 0)]]></title>
				<content>
					<text id="title" style="title" x="170" y="20" width="585"><![CDATA[Pages Branch 1]]></text>
					<image id="block-depth" x="200" y="80" file="images/assets/block1.png"/>
					<text id="block-text-depth" style="button" x="210" y="90"><![CDATA[Page 1 (depth 0)]]></text>
				</content>
				<page background="Background 1" id="page11" type="PageEmpty" urlfriendly="page11" depth="1">
					<title><![CDATA[Page 11 (depth 1)]]></title>
					<content>
						<image id="block-depth" x="240" y="120" file="images/assets/block1.png"/>
						<text id="block-text-depth" style="button" x="250" y="130"><![CDATA[Page 11 (depth 1)]]></text>
					</content>
					<page background="Background 1" id="page111" type="PageEmpty" urlfriendly="page111" depth="2">
						<title><![CDATA[Page 111 (depth 2)]]></title>
						<content>
							<image id="block-depth" x="280" y="160" file="images/assets/block1.png"/>
							<text id="block-text-depth" style="button" x="290" y="170"><![CDATA[Page 111 (depth 2)]]></text>
						</content>
					</page>
					<page background="Background 1" id="page112" type="PageEmpty" urlfriendly="page112" depth="2">
						<title><![CDATA[Page 112 (depth 2)]]></title>
						<content>
							<image id="block-depth" x="280" y="160" file="images/assets/block1.png"/>
							<text id="block-text-depth" style="button" x="290" y="170"><![CDATA[Page 112 (depth 2)]]></text>
						</content>
					</page>
				</page>
				<page background="Background 1" id="page12" type="PageEmpty" urlfriendly="page12" depth="1">
					<title><![CDATA[Page 12 (depth 1)]]></title>
					<content>
						<image id="block-depth" x="240" y="120" file="images/assets/block1.png"/>
						<text id="block-text-depth" style="button" x="250" y="130"><![CDATA[Page 12 (depth 1)]]></text>
					</content>
					<page background="Background 1" id="page121" type="PageEmpty" urlfriendly="page121" depth="2">
						<title><![CDATA[Page 121 (depth 2)]]></title>
						<content>
							<image id="block-depth" x="280" y="160" file="images/assets/block1.png"/>
							<text id="block-text-depth" style="button" x="290" y="170"><![CDATA[Page 121 (depth 2)]]></text>
						</content>
					</page>
					<page background="Background 1" id="page122" type="PageEmpty" urlfriendly="page122" depth="2">
						<title><![CDATA[Page 122 (depth 2)]]></title>
						<content>
							<image id="block-depth" x="280" y="160" file="images/assets/block1.png"/>
							<text id="block-text-depth" style="button" x="290" y="170"><![CDATA[Page 122 (depth 2)]]></text>
						</content>
					</page>
				</page>
			</page>
			<page background="Background 1" id="page2" type="PageEmpty" urlfriendly="page2" depth="0">
				<title><![CDATA[Page 2 (depth 0)]]></title>
				<content>
					<text id="title" style="title" x="170" y="20" width="585"><![CDATA[Pages Branch 2]]></text>
					<image id="block-depth" x="200" y="80" file="images/assets/block2.png"/>
					<text id="block-text-depth" style="button" x="210" y="90"><![CDATA[Page 2 (depth 0)]]></text>
				</content>
				<page background="Background 1" id="page21" type="PageEmpty" urlfriendly="page21" depth="1">
					<title><![CDATA[Page 21 (depth 1)]]></title>
					<content>
						<image id="block-depth" x="240" y="120" file="images/assets/block2.png"/>
						<text id="block-text-depth" style="button" x="250" y="130"><![CDATA[Page 22 (depth 1)]]></text>
					</content>
					<page background="Background 1" id="page211" type="PageEmpty" urlfriendly="page211" depth="2">
						<title><![CDATA[Page 211 (depth 2)]]></title>
						<content>
							<image id="block-depth" x="280" y="160" file="images/assets/block2.png"/>
							<text id="block-text-depth" style="button" x="290" y="170"><![CDATA[Page 211 (depth 2)]]></text>
						</content>
					</page>
					<page background="Background 1" id="page212" type="PageEmpty" urlfriendly="page212" depth="2">
						<title><![CDATA[Page 212 (depth 2)]]></title>
						<content>
							<image id="block-depth" x="280" y="160" file="images/assets/block2.png"/>
							<text id="block-text-depth" style="button" x="290" y="170"><![CDATA[Page 212 (depth 2)]]></text>
						</content>
					</page>
				</page>
				<page background="Background 1" id="page22" type="PageEmpty" urlfriendly="page22" depth="1">
					<title><![CDATA[Page 22 (depth 1)]]></title>
					<content>
						<image id="block-depth" x="240" y="120" file="images/assets/block2.png"/>
						<text id="block-text-depth" style="button" x="250" y="130"><![CDATA[Page 22 (depth 1)]]></text>
					</content>
					<page background="Background 1" id="page221" type="PageEmpty" urlfriendly="page221" depth="2">
						<title><![CDATA[Page 221 (depth 2)]]></title>
						<content>
							<image id="block-depth" x="280" y="160" file="images/assets/block2.png"/>
							<text id="block-text-depth" style="button" x="290" y="170"><![CDATA[Page 221 (depth 2)]]></text>
						</content>
					</page>
					<page background="Background 1" id="page222" type="PageEmpty" urlfriendly="page222" depth="2">
						<title><![CDATA[Page 222 (depth 2)]]></title>
						<content>
							<image id="block-depth" x="280" y="160" file="images/assets/block2.png"/>
							<text id="block-text-depth" style="button" x="290" y="170"><![CDATA[Page 222 (depth 2)]]></text>
						</content>
					</page>
				</page>
			</page>
		</page>
		<page background="Background 1" id="pageExcluded" type="CanvasPage" urlfriendly="excluded">
			<title><![CDATA[Page Excluded]]></title>
			<content parse="false">
				<text id="intro">
				<![CDATA[
					<p>Everything you want to see in the URL must be a page, even if sometimes it is not really a page. Page excluded will help you set a "url state" when the url will target not a page but a state in your page. To understand, let's take an example.<br/></p>
					<p>You have a portfolio showing a bunch of images and you want to be able to send a user to a specific image using the URL. It means you'll probably need a URL like this:<br/></p>
					<textformat indent="30">
						<p class="code">www.site.com/#/portfolio/1/</p>
						<p class="code">www.site.com/#/portfolio/2/</p>
						<p class="code">www.site.com/#/portfolio/3/<br/></p>
					</textformat>
					<p>The way to achieve this with Soma is using the attribute "exclude" and set it to true in the page node of your <a href="./#/xml/">XML Site Definition</a>. For instance the picture of the portfolio will become a real page node, making the page system and the deep-linking working. You probably also don't want to show these pages in your menu.<br/></p>
					<p>This is called a "page excluded" in the Soma page system. To show to a "page excluded", you use the same syntax:<br/></p>
					<textformat indent="30">
						<p class="code">new PageEvent(PageEvent.SHOW, "myPortfolioPicture").dispatch();<br/></p>
					</textformat>
					<p>This command will tell the PageManager not to remove the current page and not to show and instantiate a new one. Instead the PageManager will dispatch a <span class="code">PageEvent.EXCLUDED</span>. You can listen to this event and make your page reacting as you expect. In this example, we would select a specific image in the portfolio.<br/></p>
					<p>The PageManager will also dispatch a <span class="code">PageEvent.EXCLUDED_PARENT</span> when it finds a page with children excluded. This can be used to reset a page, in our example we can use it to unselect all the images.<br/></p>
					<p>See the example <a href="./#/page-system/excluded/demo/">PageExcluded demo</a>.</p>
				]]>
				</text>
			</content>
			<page background="Background 1" id="pageExcludedDemo" type="PageExcludedDemo" urlfriendly="demo">
				<title><![CDATA[Page Excluded demo]]></title>
				<content parse="false">
					<text id="intro">
					<![CDATA[
						<p>Select images and see the deep-linking working, pressing the back and forward button on your browser will update the state of the page.<br/></p>
					]]>
					</text>
				</content>
				<page id="image0" urlfriendly="1" file="images/assets/asset0.jpg" exclude="true" />
				<page id="image1" urlfriendly="2" file="images/assets/asset1.jpg" exclude="true" />
				<page id="image2" urlfriendly="3" file="images/assets/asset2.jpg" exclude="true" />
				<page id="image3" urlfriendly="4" file="images/assets/asset3.jpg" exclude="true" />
				<page id="image4" urlfriendly="5" file="images/assets/asset4.jpg" exclude="true" />
			</page>
		</page>
		<page background="Background 1" id="pageExternal" type="CanvasPage" urlfriendly="external">
			<title><![CDATA[Page External]]></title>
			<content parse="false">
				<text id="intro">
				<![CDATA[
					<p>You can add a external attribute in the page node and set it to true in your <a href="./#/xml/">XML Site Definition</a>. Instead of instantiate a page class, the PageManager will load a SWF file with the value of the type attribute. To load a SWF file "MyMovie.swf", you have to set the type attribute value with "MyMovie" and have the movie near the "Main.swf". You can add a path attribute to your page node if your SWF is in some other place.<br/></p>
					<p>You can choose to make your external SWF working with the Soma framework or be only a simple Flash movie that won't access to the framework. If you decide to have an external page that extends a Sprite and that is not accessing to the framework, you might have difficulties to correctly remove and dispose the elements you instantiate inside.<br/></p>
					<p>I advice that the Document Class of your external movie extends <span class="code">com.soma.view.Page</span> and implements <span class="code">com.soma.interface.IPage</span>. You can build the Document Class as a normal page, the transitionIn and transitionOut methods will be called by the PageManager, making you able to handle transitions to show and hide the page, and also dispose and correctly remove the elements from your page.<br/></p>
					<p><u>NOTE:</u> For a external page that is using the <a href="./#/xml/">XML Site Definition</a>, you need to explicitely set the id of the page in the init function of your Document Class. The id of the page class is the value of the attribute id of the page node.<br/></p>
					<p>See the <a href="./#/page-system/external/demo/">external page demo</a>.<br/></p>
				]]>
				</text>
				
			</content>
			<!-- a path attribute can be used for an external page -->
			<page background="Background 1" id="externalSWF" type="ExternalSWF" urlfriendly="demo" external="true">
				<title><![CDATA[Page External demo]]></title>
				<content parse="false">
					<text id="intro">
					<![CDATA[
						<p>This page is an External SWF loaded by the PageManager.<br/></p>
						<p>The content you can see here is coming from the same <a href="./#/xml/">XML Site Definition</a> as the Main Movie.<br/></p>
						<p>The id property of the page has been explicitely set, which is the only requirement for an "external page".<br/></p>
						<p>See the <a href="../source/front-end/src/com/somaprotest/pages/ExternalSWF.as" target="_blank">Document class of the External Movie</a></p>
						<p class="code">/source/front-end/src/com/somaprotest/pages/ExternalSWF.as<br/></p>
						<p>init overriden function of an external page:</p>
					]]>
					</text>
				</content>
			</page>
		</page>
		<page background="Background 1" id="pageMovieClip" type="PageMovieClip" urlfriendly="movieclip" movieclip="true">
			<title><![CDATA[Page MovieClip]]></title>
			<content parse="false">
				<text id="intro">
				<![CDATA[
					<p>This page is a MovieClip page. A page node can accept an attribute movieclip, this is a special mode for Flash IDE users. When this attribute is set to true, the PageManager will not instantiate a page class but a MovieClip from a Flash library. This MovieClip will have to exist and the Base Class will have to be set to a Page subclass.<br/></p>
					<p>You can build your pages as MovieClip straight in the Flash IDE, which can make the development very quick, and still have an actionscript class to do whatever you need.<br/></p>
					<p><a href="./#/somaui/">SomaUI</a> can generate the classes and the MovieClip for you, but to do it manually, here are the steps:<br/></p>
					<textformat indent="30">
						<p>1. Create a page subclass and name it: "PageMovieClipClass", like any other (see the <a href="../source/front-end/src/com/somaprotest/pages/PageMovieClipClass.as" target="_blank">code of this page</a>)</p>
						<p>2. Create a page node <span class="code">&lt;page id="pagemovieclip" type="PageMovieClip" movieclip="true"&gt;</span></p>
						<p>3. Create a MovieClip in the Flash IDE library and name it "PageMovieClip"</p>
						<p>4. In the property of the MovieClip, export for Actionscrip with the field Class set to "PageMovieClip"</p>
						<p>5. Set the BaseClass to be the actionscript Page Class <span class="code">com.somaprotest.pages.PageMovieClipClass</span><br/></p>
					</textformat>
					<p>This MovieClip will now be instantiated by the PageManager as a normal page, with the transitionIn and transitionOut methods available (you can avoid to use them if you want to make a timeline transition).<br/></p>
					<p>To access to MovieClip children built in Flash from the actionscript class, let's take an example of a textfield with a Instance Name of "title", use in the class: <span class="code">this.title</span></p>
				]]>
				</text>
	        </content>
		</page>
	</page>
	<!-- SomaLoader -->
	<page background="Background 1" id="somaloader" type="CanvasPage" urlfriendly="somaloader">
		<title><![CDATA[SomaLoader]]></title>
		<content parse="false">
			<text id="intro">
			<![CDATA[
				<p>SomaLoader is a library to load and manage assets such as images, swf, xml, text, xml, css, fonts in a swf, mp3, variables and binary data. SomaLoader can be used without Soma.<br/></p> 
				<p>Items can be added, removed and changed in position from the queue even while loading. SomaLoader provides a simple and unique interface for massive loading, to listen to events and access to data.<br/></p> 
				<p>SomaLoader has some specific features such as targeting before loading, easy loading progress display, caching system and binary loading for "silent loading". <br/></p> 
				<p>To use SomaLoader, here are some links:<br/></p>
				<textformat indent="30">
					<p><a href="http://www.soundstep.com/blog/downloads/somaloader/" target="_blank">Project Home</a></p>
					<p><a href="http://code.google.com/p/somaloader/" target="_blank">Project Source</a></p>
					<p><a href="http://www.soundstep.com/blog/source/somaloader/docs/" target="_blank">Documentation</a></p>
					<p><a href="http://code.google.com/p/somaloader/w/list" target="_blank">Tutorials</a></p>
					<p><a href="http://www.soundstep.com/blog/source/somaloader/demo/" target="_blank">Demo</a><br/></p>
				</textformat>
				<p>A global SomaLoader instance is internally used by Soma to load xml, assets, stylesheets, and so on. You can access it using the loader property of the Soma instance:<br/></p> 
				<textformat indent="30">
					<p><span class="code">Soma.getInstance().loader</span><br/></p>
				</textformat>
			]]>
			</text>
		</content>
	</page>
    <!-- stylesheets -->
    <page background="Background 1" id="stylesheet" type="Stylesheet" urlfriendly="stylesheet">
        <title><![CDATA[Stylesheets]]></title>
		<content parse="false">
			<text id="intro">
			<![CDATA[
				<p>Soma has a powerful way to handle texts and styles with the class <span class="code">com.soma.view.SomaText</span> and external extended stylesheets.<br/></p>
				<p class="bold">Extended Stylesheet<br/></p>
				<p>The stylesheets you can handle with Soma are common CSS files with extra capabilities. See the list of <a href="./#/stylesheet/css-properties/">CSS properties</a> you can use in your Stylesheet.<br/></p>
				<p>You can load a global stylesheet using this syntax before starting Soma:<br/></p>
				<textformat indent="30">
					<p class="code">Soma.getInstance().registerGloBalStyleSheet("css/flash_global.css");<br/></p>
				</textformat>
				<p>You can access it with the StyleManager using:<br/></p>
				<textformat indent="30">
					<p class="code">Soma.getInstance().styles.getGlobalStyleSheet();<br/></p>
				</textformat>
				<p>Using the StyleManager, you can add as many Stylesheets as you want and easily load them via the loadStyleSheet method of the StyleManager (a <span class="code">StyleSheetEvent.LOADED</span> event will be dispatched):<br/></p>
				<textformat indent="30">
					<p class="code">SomaExtended.getInstance().styles.loadStyleSheet("skin", "css/flash_skin.css");<br/></p>
				</textformat>
				<p>See the <a href="css/flash_global.css" target="_blank">Soma Protest Stylesheet</a> (<span class="code">/www/css/flash_global.css</span>).<br/></p>
				<p class="bold">SomaText<br/></p>
				<p>SomaText is a class that is extending the TextField Flash built-in class: <span class="code">com.soma.view.SomaText</span><br/></p>
				<p>The SomaText constructor can take 4 optionals parameters:<br/></p>
				<ul>
					<li>the text of the TextField.</li>
					<li>the style name from the Stylesheet (without dot).</li>
					<li>the Stylesheet target (if none is passed, the global Stylesheet will be used).</li>
					<li>a properties object that can be aplied on the TextField.<br/></li>
				</ul>
				<p>SomaText can be used in 2 ways, as a label with only style applied or as a more complicated text with html tags. Here are some syntax examples:<br/></p>
			]]>
			</text>
			<text id="text1">
			<![CDATA[
				<p>These are only syntax examples with the constructor, you have access to any TextField properties as SomaText is extending it (consider it a TextField class with some extra). You can also set most of the TextField and TextFormat properties in the Stylesheet if you prefer have them set externally.<br/></p>
				<p>SomaText has default TextField properties values, not to set the same properties on all the TextField you are creating. They can be set at the beginning of the project (in the Config file for example). Here is a list of the default properties you can set:<br/></p>
				<textformat indent="30">
					<p class="code">SomaText.DEFAULT_TYPE</p>
					<p class="code">SomaText.DEFAULT_EMBED_FONT</p>
					<p class="code">SomaText.DEFAULT_ANTIALIAS</p>
					<p class="code">SomaText.DEFAULT_AUTOSIZE</p>
					<p class="code">SomaText.DEFAULT_MULTILINE</p>
					<p class="code">SomaText.DEFAULT_WORDWRAP</p>
					<p class="code">SomaText.DEFAULT_SELECTABLE</p>
					<p class="code">SomaText.DEFAULT_CONDENSE_WHITE</p>
					<p class="code">SomaText.DEFAULT_MOUSEWHEEL_ENABLED</p>
					<p class="code">SomaText.DEFAULT_DOUBLECLICK_ENABLED</p>
					<p class="code">SomaText.DEFAULT_GRIDFITTYPE</p>
					<p class="code">SomaText.DEFAULT_RICHTEXT_CLIPBOARD_ENABLED<br/></p>
				</textformat>
				<p>SomaText has some extra functionalities:<br/></p>
				<textformat indent="30">
					<p><span class="code">setStyle</span> method, set a style from a stylesheet.</p>
					<p><span class="code">style</span> method (read only), get the style used on the SomaText instance.</p>
					<p><span class="code">resetToDefault</span> method, remove style and stylesheet to default values.</p>
					<p><span class="code">setProperties</span> method, set TextField properties by passing an object.</p>
					<p><span class="code">trace(somaTextInstance)</span> trace a full description and values of the TextField and defaultTextFormat values.<br/></p>
				</textformat>
			]]>
			</text>
		</content>
	    <page background="Background 1" id="cssProperties" type="CanvasPage" urlfriendly="css-properties">
	        <title><![CDATA[CSS properties]]></title>
			<content parse="false">
				<text id="intro">
				<![CDATA[
					<p>You can use the following list of CSS properties with SomaText in your Stylesheet, most of the properties are not flash built-in and will work only with SomaText.<br/></p>
					<p>The TextField properties will apply on the whole TextField and The TextFormat properties can be applied on specific parts of the text using HTML tags<br/></p>
					<p class="bold">TextField properties access<br/></p>
					<p><span class="code">alpha: 50;</span> (alpha) 0-100</p>
					<p><span class="code">always-show-selection: true;</span> (alwaysShowSelection) true-false</p>
					<p><span class="code">anti-alias-type: advanced;</span> (antiAliasType) normal-advanced</p>
					<p><span class="code">auto-size: left;</span> (autoSize) center-none-left-right</p>
					<p><span class="code">background: true;</span> (background) true-false</p>
					<p><span class="code">background-color: #CCCCCC;</span> (backgroundColor) color value</p>
					<p><span class="code">blend-mode: multiply;</span> (blendMode) add-alpha-darken-difference-erase...</p>
					<p><span class="code">border: true;</span> (border) true-false</p>
					<p><span class="code">border-color: #CCCCCC;</span> (borderColor) color value</p>
					<p><span class="code">cache-as-bitmap: true;</span> (cacheAsBitmap) true-false</p>
					<p><span class="code">condense-white: true;</span> (condenseWhite) true-false</p>
					<p><span class="code">display-as-password: true;</span> (displayAsPassword) true-false</p>
					<p><span class="code">double-click-enabled: true;</span> (doubleClickEnabled) true-false</p>
					<p><span class="code">embed-fonts: true;</span> (embedFonts) true-false</p>
					<p><span class="code">grid-fit-type: pixel;</span> (gridFitType) none-pixel-subpixel</p>
					<p><span class="code">height: 40;</span> (height) pixel value</p>
					<p><span class="code">max-chars: 10;</span> (maxChars) number of character</p>
					<p><span class="code">mouse-enabled: true;</span> (mouseEnabled) true-false</p>
					<p><span class="code">mouse-wheel-enabled: true;</span> (mouseWheelEnabled) true-false</p>
					<p><span class="code">multiline: true;</span> (multiline) true-false</p>
					<p><span class="code">name: myTextField;</span> (name) string value</p>
					<p><span class="code">restrict: 0-9;</span> (restrict) regExp, ex: "A-Z 0-9", "^a-z", "\\-\\^", "A-Z^Q", "\u0020-\u007E"</p>
					<p><span class="code">rotation: 30;</span> (rotation) pixel value</p>
					<p><span class="code">scaleX: 300;</span> (scaleX) pixel value</p>
					<p><span class="code">scaleY: 300;</span> (scaleY) pixel value</p>
					<p><span class="code">scrollH: 30;</span> (scrollH) pixel value</p>
					<p><span class="code">scrollV: 30;</span> (scrollV) pixel value</p>
					<p><span class="code">selectable: true;</span> (selectable) true-false</p>
					<p><span class="code">sharpness: 50;</span> (sharpness) -200 to 200;</p>
					<p><span class="code">tab-enabled: true;</span> (tabEnabled) true-false</p>
					<p><span class="code">tab-index: 1;</span> (tabIndex) int value</p>
					<p><span class="code">thickness: 50;</span> (thickness) -200 to 200;</p>
					<p><span class="code">use-rich-text-clipboard: true;</span> (useRichTextClipboard) true-false</p>
					<p><span class="code">visible: true;</span> (visible) true-false</p>
					<p><span class="code">width: 300;</span> (width) pixel value</p>
					<p><span class="code">word-wrap: true;</span> (wordWrap) pixel value<br/></p>
					<p class="bold">TextFormat properties access<br/></p>
					<p><span class="code">color: #FF0000;</span> (color) color value</p>
					<p><span class="code">display: block;</span> inline-block-and none</p>
					<p><span class="code">font-family: "Arial, _sans";</span> (font) list of fonts (mono: _typewriter, sans-serif: _sans, serif: _serif)</p>
					<p><span class="code">font-size: 10;</span> (size) pixel value</p>
					<p><span class="code">font-style: italic;</span> (italic) normal-italic</p>
					<p><span class="code">font-weight: bold;</span> (bold) normal-bold</p>
					<p><span class="code">kerning: true;</span> (kerning) true-false</p>
					<p><span class="code">leading: 4;</span> (leading) pixel value</p>
					<p><span class="code">letter-spacing: 4;</span> (letterSpacing) pixel value</p>
					<p><span class="code">margin-left: 30;</span> (leftMargin) pixel value</p>
					<p><span class="code">margin-right: 30;</span> (rightMargin) pixel value</p>
					<p><span class="code">text-align: right;</span> (align) left-right-center-justify</p>
					<p><span class="code">text-decoration: underline;</span> (underline) underline-none</p>
					<p><span class="code">text-indent: 30;</span> (blockIndent) pixel value<br/></p>
				]]>
				</text>
			</content>
		</page>
	</page>
    <!-- node parser -->
    <page background="Background 1" id="assets" type="CanvasPage" urlfriendly="assets">
        <title><![CDATA[Assets]]></title>
		<content parse="false">
			<text id="intro">
			<![CDATA[
				<p>NodeParser is a class that is instantiated by a page class and its role is to dynamically create assets (and load is necessary) from the <a href="./#/xml/">XML Site Definition</a>. The NodeParser will get the children of a <span class="code">content</span> node (if existing) inside a page node.<br/></p>
				<textformat indent="30">
					<p class="code">&lt;page id="myPage" type="MyPage"&gt;</p>
						<textformat indent="60">
						<p class="code">&lt;title&gt;&lt;![CDATA[My Page]]&gt;&lt;/title&gt;</p>
						<p class="code">&lt;content&gt;</p>
						<textformat indent="90">
						<p class="code">...list of assets nodes</p>
						</textformat>
						<p class="code">&lt;/content&gt;</p>
						</textformat>
					<p class="code">&lt;/page&gt;<br/></p>
				</textformat>
				<p>Example to load and create an image:<br/></p>
				<textformat indent="30">
					<p class="code">&lt;content&gt;</p>
					<textformat indent="60">
						<p class="code">&lt;image id="myImage" file="images/image.jpg" x="100" y="100" alpha="0.5"/&gt;</p>
					</textformat>
					<p class="code">&lt;/content&gt;<br/></p>
				</textformat>
				<p>Bypass the parsing and creation process with the parse attribute:<br/></p>
				<textformat indent="30">
					<p class="code">&lt;content parse="false"&gt;<br/></p>
				</textformat>
				<p class="title">List of built-in assets<br/></p>
				<textformat indent="30">
					<p>Image (Sprite instance containing a Bitmap instance, external file)</p>
					<p class="code">&lt;image id="myImage" file="images/image.jpg" x="100" y="100"/&gt;<br/></p>
					<p>Text (SomaText instance)</p>
					<p class="code">&lt;text id="myText" style="body" x="100" y="100"&gt;&lt;![CDATA[My text.]]&gt;&lt;/text&gt;<br/></p>
					<p>Bitmap (Bitmap instance created from a Bitmap in a Flash library)</p>
					<p class="code">&lt;bitmap id="myBitmap" linkage="MyBitmap" x="100" y="100"/&gt;<br/></p>
					<p>Bitmap (MovieClip instance created from a Movie Clip in a Flash library)</p>
					<p class="code">&lt;movieclip id="myMovieClip" linkage="MyMovieClip" x="100" y="100"/&gt;<br/></p>
					<p>Video (SomaVideo instance)</p>
					<p class="code">&lt;video id="myVideo" url="video.flv" volume="1" pan="0" x="100" y="100"/&gt;<br/></p>
					<p>Video Player (SomaVideoPlayer instance)</p>
					<p class="code">&lt;videoplayer id="myVideo" url="video.flv" volume="1" pan="0" x="100" y="100"/&gt;<br/></p>
					<p>XML (external file)</p>
					<p class="code">&lt;xml id="myXML" file="myXML.xml"/&gt;<br/></p>
					<p>Custom class (Custom class instance)</p>
					<p class="code">&lt;myClass id="myClass" classname="com.mysite.MyClass" myProperty="myValue"/&gt;<br/></p>
				</textformat>
				<p>Note: The last node example instantiates a custom class, the required attribute is the classname (the class). You have the option to use the classname without the package (classname="MyClass") if you register the class to Soma somewhere in the code: <span class="code">Soma.getInstance().registerClass(MyClass)</span>.<br/></p>
				<p class="title">Applying properties to an asset<br/></p>
				<p>When an asset is created, you can apply properties to the instance created. For example an asset <span class="code">&lt;image/&gt;</span> is a Sprite, you can apply properties of this class and super class. A Sprite has some properties like visible, alpha, x, y, width, height, etc... that you can use and apply from the node.<br/></p>
				<textformat indent="30">
					<p class="code">&lt;image id="myImage" file="image.jpg" visible="false" alpha="0.5" width="100" x="10"/&gt;</p>
					<p class="code">&lt;myClass id="myClass" classname="com.mysite.MyClass" myProperty="myValue"/&gt;<br/></p>
				</textformat>
				<p>Beside built-in properties or custom properties (in case of a custom class), you can also apply <a href="./#/baseui/">BaseUI</a> properties for layout purpose, such as top, bottom, left, right, horizontalCenter, verticalCenter, width and height (also with percentage), ratio (ratio_in and ratio_out), etc.<br/></p>
				<textformat indent="30">
					<p class="code">&lt;video id="myVideo" url="video.flv" horizontalCenter="0" verticalCenter="0" width="80%"/&gt;</p>
					<p class="code">&lt;image id="myBackground" file="image.jpg" ratio="ratio_out"/&gt;</p>
					<p class="code">&lt;movieclip id="myMovieClip" linkage="MyMovieClip" bottom="20" right="20"/&gt;<br/></p>
				</textformat>
				<p class="title">Access to the assets<br/></p>
				<p>There is at least four ways to retrieve the assets in your page. The easiest is to add some listeners to the page itself.<br/></p>
				<textformat indent="30">
					<p>Assets that don't require a loading are created.</p>
					<p class="code">addEventListener(addEventListener(PageEvent.CONTENT_PARSED, contentParsedHandler);<br/></p>
					<p>All the assets are created.</p>
					<p class="code">addEventListener(addEventListener(PageEvent.CONTENT_COMPLETE, contentCompleteHandler);<br/></p>
					<p class="code">private function contentCompleteHandler(e:PageEvent):void {</p>
					<textformat indent="60">
						<p class="code">var myAssets:Array = assets;</p>
						<p class="code">var video = getAssetById("idAttributeFromXML") as SomaVideoPlayer;</p>
					</textformat>
					<p class="code">}<br/></p>
				</textformat>
				<p>Still in the page, you can use the property "parser" (NodeParser instance) and the listeners <span class="code">ParserEvent.ASSET_LOADED<span> and <span class="code">ParserEvent.COMPLETE</span>.<br/></p>
				<p class="title">Take control of the instantiation<br/></p>
				<p>The previous assets are built-in Classes or Classes that don't need anything special to be instantiated. Let's say you have an asset class that needs a parameter in the constructor, or you need to do some actions and add some listeners on the instance. You will have to built your own "Asset Class" and add them to the Soma library, the way the built-in Soma assets are done.<br/></p>
				<p>What's a Soma library? A library contains classes that implement IAsset. The IAsset class take control over the NodeParser to instantiate an asset. The IAsset class knows what to do and how to instantiate this asset when a specific node is found in the XML.<br/></p>
				<p>Let's take a simple example. You have created a Class that draws a circle, the contructor is taking one parameter (a radius for the size of the circle), and you would like to create a Circle from the XML.<br/></p>
				<p class="title">Custom Circle Asset<br/></p>
				<p>This can be done in 3 simple steps:<br/></p>
				<p>1. create a Circle class that extend Sprite and draw a circle.<br/></p>
				<p class="code">package com.myassets {</p>
					<textformat indent="30">
				    <p class="code">import flash.display.Sprite;</p>
				    <p class="code">public class Circle extends Sprite {</p>
						<textformat indent="60">
				        <p class="code">public function Circle(radius:Number) {</p>
							<textformat indent="90">
				            <p class="code">graphics.beginFill(0xFF0000);</p>
				            <p class="code">graphics.drawCircle(radius, radius, radius);</p>
							</textformat>
				        <p class="code">}</p>
						</textformat>
				    <p class="code">}</p>
					</textformat>
				<p class="code">}<br/></p>
				<p>2. create a CircleAsset (IAsset) class to handle the instantiation.<br/></p>
				<p class="code">package com.myassets {<br/></p>
					<textformat indent="30">
				    <p class="code">import com.soma.interfaces.IAsset;</p>
				    <p class="code">import com.soma.utils.SomaUtils;</p>
				    <p class="code">import com.soundstep.ui.BaseUI;</p>
				    <p class="code">import flash.display.DisplayObject;<br/></p>  
				    <p class="code">public class CircleAsset implements IAsset {<br/></p>
						<textformat indent="60">
				        <p class="code">public function instantiate(node:XML, baseUI:BaseUI = null):DisplayObject {</p>
							<textformat indent="90">
				            <p class="code">var circle:Circle = new Circle(node.@radius);</p>
				            <p class="code">circle.name = node.@id;</p>
				            <p class="code">SomaUtils.setProperties(circle, node, ["radius"]);</p>
				            <p class="code">if (baseUI != null) SomaUtils.setBaseUIProperties(circle, baseUI, node); </p>
				            <p class="code">return circle;</p>
							</textformat>
				        <p class="code">}</p>
						</textformat>
				    <p class="code">}</p>
					</textformat>
				<p class="code">}<br/></p>
				<p>3. register the IAsset class to the Soma Library, the first parameter is the node name that will be used in the XML and the second parameter is the IAsset class.<br/></p>
				<textformat indent="30">
				<p class="code">Soma.getInstance().library.registerAsset("circle", CircleAsset);<br/></p>
				</textformat>
				<p>You can now use the registered asset Circle in the XML (the classname attribute is no longer required).<br/></p>
				<textformat indent="30">
				<p class="code">&lt;circle id="myCircle" alpha=".5" radius="30" x="100" y="100"/&gt;<br/></p>
				</textformat>
				<p>See the <a href="./#/assets/demo/">NodeParser demo</a> page.<br/></p>
			]]>
			</text>
		</content>
		<page background="Background 1" id="nodeParserDemo" type="Parser" urlfriendly="demo">
			 <title><![CDATA[Assets demo]]></title>
			<content>
				<text id="title" style="title" x="170" y="20" width="585"><![CDATA[Node Parser demo]]></text>
				<text id="intro" style="body" x="170" y="50" width="585">
				<![CDATA[
					<p>All the assets in this page have been created from the XML.<br/></p>
				]]>
				</text>
				<text id="xmlLoadedAlert" style="body" right="20" y="86" width="145"/>
				<videoplayer id="video" url="video/video.flv" x="170" y="86" scaleX="1" scaleY="1" volume="1" pan="0"/>
		    	<circleParam id="circleParam" width="50" height="100" alpha=".4"  x="515" y="106"/>
		    	<circle id="circleSimple" classname="CircleSimple" width="50" height="50" alpha=".4" x="515" y="86"/>
				<bitmap id="bitmapFromLibrary1" linkage="Asset1" right="60" y="117" blendMode="multiply" scaleX=".3" scaleY=".3"/>
			    <movieclip id="movieclipFromLibrary2" linkage="Asset2" right="100" y="240" scaleX=".3" scaleY=".3"/>
		    	<image id="externalAsset1" file="images/backgrounds/bg0.jpg" x="170" bottom="20" scaleX=".15" scaleY=".15"/>
		        <image id="externalAsset2" file="images/backgrounds/bg1.jpg" x="280" bottom="40" scaleX=".15" scaleY=".15"/>
		        <image id="externalAsset3" file="images/backgrounds/bg2.jpg" x="390" bottom="20" scaleX=".15" scaleY=".15"/>
		        <image id="externalAsset4" file="images/backgrounds/bg3.jpg" x="500" bottom="40" scaleX=".15" scaleY=".15"/>
		        <image id="externalAsset5" file="images/backgrounds/bg4.jpg" x="610" bottom="20" scaleX=".15" scaleY=".15"/>
		        <xml id="myXML" file="data/xml-examples/sample.xml"/>
			</content>
		</page>
	</page>
    <!-- custom MVC -->
    <page background="Background 1" id="customMVC" type="CustomMVC" urlfriendly="custom-mvc">
        <title><![CDATA[Custom MVC]]></title>
        <content parse="false">
            <text id="intro">
			<![CDATA[
				<p>I have created an Alert Modal Window in Soma Protest to show you how you can build your own controller, models and views. This Alert will show a message and disable Soma Protest, with a close button to come back to the normal state.<br/></p>
				<p>In a further release I will implement services with Flash Remoting and build a Login demonstration.<br/></p>
				<p>Click here to see the Alert window:</p>
			]]>
			</text>
            <text id="text1">
			<![CDATA[
				<p class="bold">Controller<br/></p>
				<p>The first step is creating a Soma Protest controller class. You can decide where you will add the models, controllers, views and events packages, but for Soma Protest I've added them in a <span class="code">com.somaprotest.core</span> package.</p>
				<p>In this package I've created a control package and add a controller class that is extending <span class="code">com.soma.control.FrontController</span>. See the class <a href="../source/front-end/src/com/somaprotest/core/control/SomaProtestController.as" target="_blank">SomaProtestController</a>.<br/></p>
				<p>You need to initialize this controller. I could just call <span class="code">SomaProtestController.init()</span> in the Main Document Class but to make a better integration with Soma, I've created a <a href="http://en.wikipedia.org/wiki/Singleton_pattern" target="_blank">Singleton</a> SomaExtended that is extending Soma. I override the init function to add a state variable and the initController to initialize SomaProtestController. See the class <a href="../source/front-end/src/com/somaprotest/core/model/SomaExtended.as" target="_blank">SomaExtended</a>.<br/></p>
				<p class="bold">Event<br/></p>
				<p>The next step is creating an AlertEvent (in the <span class="code">com.somaprotest.core.events</span> package) that has and 2 types, SHOW_ALERT and HIDE_ALERT. See the class <a href="../source/front-end/src/com/somaprotest/core/events/AlertEvent.as" target="_blank">AlertEvent</a>.<br/></p>
				<p>The event will take a parameter that is a AlertVO class (<a href="http://en.wikipedia.org/wiki/Data_transfer_object" target="_blank">Value Object</a>), I've created it in a <span class="code">com.somaprotest.core.vo</span> package. The AlertVO class takes 2 parameters, the title and the message of the Alert window. See the class <a href="../source/front-end/src/com/somaprotest/core/vo/AlertVO.as" target="_blank">AlertVO</a>.<br/></p>
				<p class="bold">Command<br/></p>
				<p>I've created the class AlertCommand in a <span class="code">com.somaprotest.core.commands</span> package. This class will receive the command and add or remove the Alert window from a display list. I've decided to add the Alert to <span class="code">SomaExtended.getInstance().ui</span> (the Soma Protest Document Class). See the class <a href="../source/front-end/src/com/somaprotest/core/commands/AlertCommand.as" target="_blank">AlertCommand</a>.<br/></p>
				<p class="bold">Alert window<br/></p>
				<p>The last step is creating the Alert Window. I've extended a Sprite and created the class Alert in a <span class="code">com.somaprotest.core.view</span> package. It is a simple class where I build a background, a border, a close button and 2 TextField for the title and the message. I also disable the Soma Protest site when the Alert is created and enable when the Alert is removed. See the class <a href="../source/front-end/src/com/somaprotest/core/view/Alert.as" target="_blank">Alert</a>.<br/></p>
				<p>The Alert window can be created from anywhere in the code like this:<br/></p>
				<textformat indent="30">
					<p class="code">var alertVO:AlertVO = new AlertVO("Information", "My message");</p>
					<p class="code">new AlertEvent(AlertEvent.SHOW_ALERT, alertVO).dispatch();<br/></p>
				</textformat>
				<p>And hidden like this:<br/></p>
				<textformat indent="30">
					<p class="code">new AlertEvent(AlertEvent.HIDE_ALERT).dispatch();<br/></p>
				</textformat>
				<p>Click here to see the Alert window:</p>
			]]>
			</text>
			<text id="alertMessage">
			<![CDATA[
				<p>This is an Draggable Alert message example. This Draggable Alert is a modal window as SomaProtest is no longer accessible until you close this Alert or move to another page.</p>
			]]>
			</text>
        </content>
    </page>
    <!-- BaseUI -->
    <page background="Background 1" id="layoutBaseUI" type="CanvasPage" urlfriendly="baseui">
        <title><![CDATA[BaseUI integration]]></title>
        <content parse="false">
            <text id="intro">
			<![CDATA[
				<p>The layout manager <a href="http://www.soundstep.com/blog/downloads/baseui/" target="_blank">BaseUI</a> is part of Soma. Of course, like almost everything in Soma, if you're not happy with, you don't have to use it.<br/></p>
				<p>There's a global BaseUI instance accessible using <span class="code">Soma.getInstance().baseUI</span>, and a BaseUI instance for each page accessible with a baseUI property.<br/></p>
				<p>BaseUI is also part of the <a href="./#/xml/">XML Site Definition</a>, BaseUI properties can be used in the root node for a fixed layout, in the children nodes of the backgrounds node and in the children nodes of the content node of a page.<br/></p>
				<p>The sources, demo, tutorials and documentation are available on the <a href="http://www.soundstep.com/blog/downloads/baseui/" target="_blank">BaseUI page</a> on my blog.</p>
			]]>
			</text>
        </content>
    </page>
    <!-- SomaUI -->
    <page background="Background 1" id="somaUI" type="SomaUI" urlfriendly="somaui">
        <title><![CDATA[SomaUI]]></title>
        <content parse="false">
            <text id="intro">
			<![CDATA[
				<p>SomaUI is an application (AIR-Java) that is generating sources: the draft of a Flash site based on Soma, ready to use and be taken to a further development. Available for Windows, Mac and Linux, you can download it on the <a href="http://www.soundstep.com/blog/downloads/somaui/" target="_blank">SomaUI page</a> on my blog. It is available for Windows, Mac and Linux.<br/></p>
				<p>SomaUI can be a great help to start a site, as it will export the source files and deploy files you need to develop your site. A demo is provided provided if you want to test them or to start with it to write your own XML Site Definition.<br/></p>
			]]>
			</text>
			<image id="somaui screnshot 1" file="images/assets/somaui1.png"/>
			<image id="somaui screnshot 2" file="images/assets/somaui2.png"/>
			<image id="somaui screnshot 3" file="images/assets/somaui3.png"/>
			<image id="somaui screnshot 4" file="images/assets/somaui4.png"/>
			<image id="somaui screnshot 5" file="images/assets/somaui5.png"/>
			<image id="somaui screnshot 6" file="images/assets/somaui6.png"/>
        </content>
    </page>
    <page id="somadoc" externalLink="http://www.soundstep.com/blog/source/somaui/docs/">
		<title><![CDATA[Documentation]]></title>
	</page>
    <page id="project host" externalLink="http://code.google.com/p/somamvc/">
		<title><![CDATA[Google Project Host]]></title>
	</page>
    <page id="soundstep" externalLink="http://www.soundstep.com/">
		<title><![CDATA[Soundstep]]></title>
	</page>
</site>
