package com.somaprotest.core.view {	import caurina.transitions.Tweener;		import com.soma.Soma;	import com.soma.events.PageEvent;	import com.soma.interfaces.IDisposable;	import com.soma.view.SomaText;	import com.somaprotest.core.events.AlertEvent;	import com.somaprotest.core.model.SomaExtended;	import com.somaprotest.core.vo.AlertVO;	import com.soundstep.ui.ElementUI;		import flash.display.BlendMode;	import flash.display.Sprite;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.filters.BlurFilter;		
	/**	 * <b>Author:</b> Romuald Quantin - <a href="http://www.soundstep.com/" target="_blank">www.soundstep.com</a><br />	 * <b>Company:</b> Less Rain - <a href="http://www.lessrain.com/" target="_blank">www.lessrain.com</a><br />	 * <b>Class version:</b> 1.0<br />	 * <b>Actionscript version:</b> 3.0<br />	 * <b>Copyright:</b> 	 * <br />	 * <b>Date:</b> 7 Dec 2008<br />	 * <b>Usage:</b>	 * @example	 * <listing version="3.0"></listing>	 */		public class Alert extends Sprite implements IDisposable {
		//------------------------------------		// private, protected properties		//------------------------------------				private var _widthAlert:Number;		private var _heightAlert:Number;				private var _alertVO:AlertVO;		private var _title:SomaText;		private var _message:SomaText;		private var _bg:Sprite;		private var _border:Sprite;		private var _btClose:Sprite;		private var _blur:BlurFilter;				//------------------------------------		// public properties		//------------------------------------				public static const NAME:String = "SomaProtestAlert";		//------------------------------------		// constructor		//------------------------------------				public function Alert(alertVO:AlertVO) {			_alertVO = alertVO;			addEventListener(Event.ADDED_TO_STAGE, added, false, 0, true);		}		//		// PRIVATE, PROTECTED		//________________________________________________________________________________________________				private function added(e:Event):void {			removeEventListener(Event.ADDED_TO_STAGE, added, false);			initVars();			init();		}				private function initVars():void {			alpha = 0;			visible = false;			name = Alert.NAME;			_widthAlert = 320;			_heightAlert = 160;			_blur = new BlurFilter(3, 3, 1);		}				private function init():void {			draw();			buildMessage();			setListeners();			disableInterface();			setPosition();			showAlert();		}				private function draw():void {			// background			_bg = new Sprite();			_bg.blendMode = BlendMode.MULTIPLY;			addChild(_bg);			_bg.graphics.beginFill(0x534000, .95);			_bg.graphics.drawRect(0, 0, _widthAlert, _heightAlert);			_bg.graphics.endFill();			// border			_border = new Sprite();			addChild(_border);			_border.graphics.lineStyle(1, 0xFFFFFF, .7);			_border.graphics.lineTo(_widthAlert, 0);			_border.graphics.lineTo(_widthAlert, _heightAlert);			_border.graphics.lineTo(0, _heightAlert);			_border.graphics.lineTo(0, 0);			_border.graphics.endFill();		}				private function setListeners():void {			addEventListener(MouseEvent.MOUSE_DOWN, startDragAlert, false, 0, true);			addEventListener(MouseEvent.MOUSE_UP, stopDragAlert, false, 0, true);			_btClose.addEventListener(MouseEvent.CLICK, hideAlert, false, 0, true);			SomaExtended.getInstance().addEventListener(PageEvent.STARTED, pageHandler, false, 0, true);		}				private function pageHandler(e:PageEvent):void {			hideAlert();		}		private function startDragAlert(e:MouseEvent):void {			startDrag(false);		}				private function stopDragAlert(e:MouseEvent):void {			stopDrag();		}				private function disableInterface():void {			// disable			SomaExtended.getInstance().container.mouseChildren = false;			SomaExtended.getInstance().menu.getMenu(Soma.getInstance().config.menuClassName).mouseChildren = false;			SomaExtended.getInstance().base.container.mouseChildren = false;			// blur			SomaExtended.getInstance().container.filters = [_blur];			SomaExtended.getInstance().menu.getMenu(Soma.getInstance().config.menuClassName).filters = [_blur];			SomaExtended.getInstance().base.container.filters = [_blur];		}		private function enableInterface():void {			// enable			SomaExtended.getInstance().container.mouseChildren = true;			SomaExtended.getInstance().menu.getMenu(Soma.getInstance().config.menuClassName).mouseChildren = true;			SomaExtended.getInstance().base.container.mouseChildren = true;			// blur			SomaExtended.getInstance().container.filters = [];			SomaExtended.getInstance().menu.getMenu(Soma.getInstance().config.menuClassName).filters = [];			SomaExtended.getInstance().base.container.filters = [];		}		private function buildMessage():void {			// title			_title = new SomaText(_alertVO.title, "title");			_title.x = _title.y = 5;			addChild(_title);			// message			_message = new SomaText(_alertVO.message, "body");			_message.selectable = false;			_message.x = 5;			_message.y = _title.y + _title.height;			_message.width = 300;			addChild(_message);			// close			_btClose = new Sprite();			_btClose.buttonMode = true;			_btClose.mouseChildren = false;			var closeText:SomaText = new SomaText("Close", "button");			_btClose.addChild(closeText);			_btClose.x = _widthAlert - _btClose.width - 15;			_btClose.y = _heightAlert - _btClose.height - 15;			addChild(_btClose);		}		private function setPosition():void {			var el:ElementUI = SomaExtended.getInstance().baseUI.add(this);			el.reference = stage;			el.horizontalCenter = el.verticalCenter = 0;		}				private function showAlert():void {			Tweener.addTween(this, {time:.7, _autoAlpha:1});		}		private function hideAlert(e:MouseEvent = null):void {			enableInterface();			Tweener.addTween(this, {time:.7, _autoAlpha:0, onComplete:hideAlertComplete});		}		private function hideAlertComplete():void {			new AlertEvent(AlertEvent.HIDE_ALERT).dispatch();		}		// PUBLIC		//________________________________________________________________________________________________				public function dispose():void {			SomaExtended.getInstance().removeEventListener(PageEvent.STARTED, pageHandler, false);			_btClose.removeEventListener(MouseEvent.CLICK, hideAlert, false);			removeEventListener(MouseEvent.MOUSE_DOWN, startDragAlert, false);			removeEventListener(MouseEvent.MOUSE_UP, stopDragAlert, false);			SomaExtended.getInstance().baseUI.remove(this);			while (numChildren > 0) {				removeChild(getChildAt(0));			}		}			}}