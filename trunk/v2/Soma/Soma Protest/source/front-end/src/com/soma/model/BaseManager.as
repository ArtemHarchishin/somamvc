package com.soma.model {	import com.soma.Soma;	import com.soma.assets.NodeParser;	import com.soma.interfaces.IDisposable;	import com.soma.loader.SomaLoader;	import com.soundstep.ui.BaseUI;		import flash.display.DisplayObject;	import flash.display.Sprite;	import flash.utils.Dictionary;		
	/**     * <p><b>Author:</b> Romuald Quantin - <a href="http://www.soundstep.com/" target="_blank">www.soundstep.com</a><br/>     * <p><b>Information:</b><br/>     * Blog page - <a href="http://www.soundstep.com/blog/downloads/somaui/" target="_blank">SomaUI</a><br/>     * How does it work - <a href="http://www.soundstep.com/somaprotest/" target="_blank">Soma Protest</a><br/>     * Project Host - <a href="http://code.google.com/p/somamvc/" target="_blank">Google Code</a><br/>     * Documentation - <a href="http://www.soundstep.com/blog/source/somaui/docs/" target="_blank">Soma ASDOC</a><br/>     * <b>Class version:</b> 2.0<br/>     * <b>Actionscript version:</b> 3.0</p>     * <p><b>Copyright:</b></p>     * <p>The contents of this file are subject to the Mozilla Public License<br />     * Version 1.1 (the "License"); you may not use this file except in compliance<br />     * with the License. You may obtain a copy of the License at<br /></p>     *      * <p><a href="http://www.mozilla.org/MPL/" target="_blank">http://www.mozilla.org/MPL/</a><br /></p>     *      * <p>Software distributed under the License is distributed on an "AS IS" basis,<br />     * WITHOUT WARRANTY OF ANY KIND, either express or implied.<br />     * See the License for the specific language governing rights and<br />     * limitations under the License.<br /></p>     *      * <p>The Original Code is Soma.<br />     * The Initial Developer of the Original Code is Romuald Quantin.<br />     * Initial Developer are Copyright (C) 2008-2009 Soundstep. All Rights Reserved.</p>     *      * <p><b>Usage:</b><br/>     * The BaseManager handles assets in a Sprite layer between the background layer and the site layer, it is ideal to display elements (assets) that have to stay on screen (such as a logo, a footer or other design elements).     * from nodes contained in a base node in the XML Site Definition.     * Soma provides an easy way to create those assets, they can automatically be loaded and/or instantiated from the XML Site Definition (nodes children of a base node).<br/><br/>     * The global base manager instance is accessible using:     * <listing version="3.0">Soma.getInstance().base</listing>     * The assets container (Sprite) is accessible using:     * <listing version="3.0">Soma.getInstance().base.container</listing>     * The assets supported are the the ones supported by the NodeParser class (see link below), they can be text, image, bitmap, movieclip, video or your own custom classes, here are some examples:     * <listing version="3.0">&lt;text id="myText" style="body" x="10" y="10" width="200"&gt;&lt;![CDATA[Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer sed massa turpis, sit amet ornare nisl.]]&gt;&lt;/text&gt;&lt;video id="myVideo" url="video/video.flv" x="50" alpha=".5" verticalCenter="0" volume="0" /&gt;&lt;image id="myImage" file="image.png" scaleX=".5" scaleY=".5" blendMode="multiply" ratio="ratio_in"/&gt;&lt;bitmap id="myBitmap" linkage="AssetClassNameBitmap" x="170" y="170" blendMode="multiply" scaleX=".3" scaleY=".3"/&gt;&lt;movieclip id="myMovieClip" linkage="AssetClassNameMovieClip" x="170" y="280" scaleX=".3" scaleY=".3"/&gt;     * </listing>     * The assets can be retrieved using the getElementByID method and assets property, the parser and loader instance are also accessible for any need to listen to events.      * </p>     * <listing version="3.0">     * var myText:SomaText = Soma.getInstance().base.getElementByID("myText") as SomaText;     * var list:Dictionary = Soma.getInstance().base.assets;     * </listing>     *      * @see com.soma.Soma Soma     * @see com.soma.assets.NodeParser NodeParser     * @see com.soma.events.ParserEvent ParserEvent     * @see com.soma.loader.SomaLoader SomaLoader     * @see com.soma.loader.SomaLoaderEvent SomaLoaderEvent     */		public class BaseManager implements IDisposable {
		//------------------------------------		// private, protected properties		//------------------------------------				private var _container:Sprite;		private var _assets:Dictionary;		private var _assetsArray:Array;		private var _loader:SomaLoader;		private var _parser:NodeParser;		private var _baseUI:BaseUI;		private var _content:XMLList;		//------------------------------------		// public properties		//------------------------------------								//------------------------------------		// constructor		//------------------------------------				/**		 * Creates a BaseManager instance, the global BaseManager instance is accessible using Soma.getInstance().base.		 */		public function BaseManager() {					}				//		// PRIVATE, PROTECTED		//________________________________________________________________________________________________				/** @private initializes variables */		protected function init():void {			_assets = new Dictionary();			dispose();			_container = new Sprite();			_container.name = "base";			Soma.getInstance().ui.addChildAt(_container, 1);			_baseUI = new BaseUI(_container);			setLoader();		}				/** @private creates loader */		protected function setLoader():void {			_loader = new SomaLoader();		}				/** @private parses and creates assets from XML nodes */
		private function createElements():void {			_parser = new NodeParser(Soma.getInstance().library);			_parser.add(_content.children());			_assetsArray = [];			_assetsArray = _parser.run(_container, _baseUI, _loader);			for (var i:int=0; i<_assetsArray.length; i++) {				_assets[_assetsArray[i].name] = _assetsArray[i];			}
		}		// PUBLIC		//________________________________________________________________________________________________				/** Entry point of the BaseManager, it will create (and load) the assets from the children nodes of the base node from the XML Site Definition. */		public function start():void {			init();			_content = Soma.getInstance().content.getBase();			if (_content.children().length() > 0) createElements();		}				/** Disposes the BaseManager instance. Removes listeners and destroys assets, parser and container. */		public function dispose():void {			if (_container != null) {				_baseUI.removeAll();				_baseUI = null;				while (_container.numChildren > 0) {					_container.removeChildAt(0);				}				Soma.getInstance().ui.removeChild(_container);				_container = null;				if (_parser != null) {					_parser.dispose();				}			}		}				/**		 * Get an array containing the assets created from XML nodes.		 * @return An Array containing the assets.		 */		public function get assets():Array {			return _assetsArray;		}				/**		 * Get an asset in the container using its attribute id from the XML node. 		 * @return A DisplayObject instance.		 */		public function getElementByID(id:String):DisplayObject {			if (_assets == null) return null;			return _assets[id];		}				/**		 * Get the Sprite container that contains the assets, this container is by default on the index 1 in the display list (added to the main class).		 * @return A Sprite instance that contains the assets.		 */		public function get container():Sprite {			return _container;		}		
		/**		 * Get the SomaLoader instance used to load the backgrounds. This instance is the global loader instance (Soma.getInstance().loader), any action on this loader will affect the whole site.		 * @return A SomaLoader instance.		 */
		public function get loader():SomaLoader {			return _loader;
		}
				/**		 * Get the BaseUI instance used if BaseUI properties have been found in the XML (such as ratio, alignX and so on).		 * @return A BaseUI instance.		 */
		public function get baseUI():BaseUI {			return _baseUI;
		}				/**		 * Get the NodeParser instance used to parse the nodes and instantiate the backgrounds.		 * @return A NodeParser instance.		 */		public function get parser():NodeParser {			return _parser;		}	}}