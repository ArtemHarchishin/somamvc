package com.soma.view {	import com.soma.Soma;	import com.soma.errors.CairngormError;	import com.soma.errors.CairngormMessage;	import com.soma.utils.SomaUtils;	import flash.text.StyleSheet;	import flash.text.TextField;	import flash.text.TextFieldType;	import flash.text.TextFormat;	import flash.utils.describeType;	/**     * <p><b>Author:</b> Romuald Quantin - <a href="http://www.soundstep.com/" target="_blank">www.soundstep.com</a><br/>     * <p><b>Information:</b><br/>     * Blog page - <a href="http://www.soundstep.com/blog/downloads/somaui/" target="_blank">SomaUI</a><br/>     * How does it work - <a href="http://www.soundstep.com/somaprotest/" target="_blank">Soma Protest</a><br/>     * Project Host - <a href="http://code.google.com/p/somamvc/" target="_blank">Google Code</a><br/>     * Documentation - <a href="http://www.soundstep.com/blog/source/somaui/docs/" target="_blank">Soma ASDOC</a><br/>     * <b>Class version:</b> 2.0<br/>     * <b>Actionscript version:</b> 3.0</p>     * <p><b>Copyright:</b></p>     * <p>The contents of this file are subject to the Mozilla Public License<br />     * Version 1.1 (the "License"); you may not use this file except in compliance<br />     * with the License. You may obtain a copy of the License at<br /></p>     *      * <p><a href="http://www.mozilla.org/MPL/" target="_blank">http://www.mozilla.org/MPL/</a><br /></p>     *      * <p>Software distributed under the License is distributed on an "AS IS" basis,<br />     * WITHOUT WARRANTY OF ANY KIND, either express or implied.<br />     * See the License for the specific language governing rights and<br />     * limitations under the License.<br /></p>     *      * <p>The Original Code is Soma.<br />     * The Initial Developer of the Original Code is Romuald Quantin.<br />     * Initial Developer are Copyright (C) 2008-2009 Soundstep. All Rights Reserved.</p>     *      * <p><b>Usage:</b><br/>     * SomaText is extending the TextField class and add a powerful Stylesheet Management with parsable properties.<br />	 * You can find a full list of CSS properties you can use with SomaText in the Soma Protest <a href="http://www.soundstep.com/somaprotest/www/#/stylesheet/css-properties/" target="_blank">CSS properties page</a>.<br /><br /> 	 * SomaText will use the global stylesheet if you are passing a style without passing a stylesheet (see <a href="../Soma.html">Soma</a> and <a href="../model/StyleManager.html">StyleManager</a> to set a global stylesheet).<br /><br />	 * You can see the <a href="http://www.soundstep.com/somaprotest/www/css/flash_global.css" target="_blank">Soma Protest CSS file</a> for a stylesheet example.	 * 	 * <b>Simple text</b>	 * <listing version="3.0">var myText:SomaText = new SomaText("simple text");	 * </listing>	 * 	 * <b>Text with style from the global stylesheet</b>	 * <listing version="3.0">var myText:SomaText = new SomaText("text with style from the global stylesheet", "simpleStyle");	 * </listing>	 * 	 * <b>Text with style from another stylesheet</b>	 * <listing version="3.0">var myText:SomaText = new SomaText("text with style from another stylesheet", "simpleStyle", _customStylesheet);	 * </listing>	 * 	 * 	 * <b>Multiline text with properties set in actionscript</b>	 * <listing version="3.0">var myText:SomaText = new SomaText("multiline text with textfield properties modified in the actionscript: width, multiline, wordWrap, selectable, and so on.", "defaultText");myText.width = 220;myText.multiline = true;myText.wordWrap = true;myText.selectable = true;	 * </listing>	 * 	 * <b>Can be set in the constructor or using the setProperties method</b>	 * <listing version="3.0">myText.setProperties({width: 220, multiline: true, wordWrap: true, selectable: true});	 * </listing>	 * 	 * <b>Multiline text with properties set in the stylesheet</b>	 * <listing version="3.0">var myText:SomaText = new SomaText("multiline text with textfield properties set in the stylesheet: width, multiline, word-wrap, selectable, and so on.", "defaultTextMultiline");	 * </listing>	 * 	 * <b>Multiline html text</b>	 * <listing version="3.0">var s1:String = '&lt;p&gt;paragraph 1, &lt;b&gt;multiline html text&lt;/b&gt; with &lt;i&gt;more style&lt;/i&gt; in the &lt;span class="color1"&gt;same SomaText&lt;/span&gt; instance.&lt;/p&gt;';var s2:String = '&lt;p class="para"&gt;paragraph 2, &lt;b&gt;multiline html text&lt;/b&gt; with &lt;i&gt;more style&lt;/i&gt; in the &lt;span class="color1"&gt;same SomaText&lt;/span&gt; instance.&lt;/p&gt;';var myText:SomaText = new SomaText(s1 + s2, "defaultTextMultiline");	 * </listing>	 * 	 * <b>Text input</b>	 * <listing version="3.0">var myText:SomaText = new SomaText("text input", "defaultTextMultiline");myText.type = TextFieldType.INPUT;myText.autoSize = TextFieldAutoSize.NONE;myText.width = 220;myText.height = 20;myText.background = true;myText.backgroundColor = 0xFFFFFF;	 * </listing>	 * 	 * <b>Text with link</b>	 * <listing version="3.0">var myText:SomaText = new SomaText('text with &lt;a href="http://www.soundstep.com/somaprotest/www/#/stylesheet/" target="_blank"&gt;link and hover&lt;/a&gt;', "defaultText");	 * </listing>     * </p>     *      * @see com.soma.Soma Soma     * @see com.soma.model.StyleManager PageEvent     */		public class SomaText extends TextField {
		//------------------------------------		// private, protected properties		//------------------------------------				private var _style:String;		private var _stylesheet:StyleSheet;		private var _defaultTextFormat:TextFormat;		private var _defaultProperties:Array;		private var _defaultValues:Array;				//------------------------------------		// public properties		//------------------------------------				/** Default type that will be used for each new instance created (TextFieldType), default is "dynamic". */		public static var DEFAULT_TYPE:String = "dynamic";		/** Default font embedded value that will be used for each new instance created, default is "false". */		public static var DEFAULT_EMBED_FONT:Boolean = false;		/** Default alias that will be used for each new instance created (AntiAliasType), default is "advanced". */		public static var DEFAULT_ANTIALIAS:String = "advanced";		/** Default autosize that will be used for each new instance created (TextFieldAutoSize), default is "left". */		public static var DEFAULT_AUTOSIZE:String = "left";		/** Default multiline value that will be used for each new instance created, default is "false". */		public static var DEFAULT_MULTILINE:Boolean = false;		/** Default wordWrap value that will be used for each new instance created, default is "false". */		public static var DEFAULT_WORDWRAP:Boolean = false;		/** Default selectable value that will be used for each new instance created, default is "false". */		public static var DEFAULT_SELECTABLE:Boolean = false;		/** Default condenseWhite value that will be used for each new instance created, default is "true". */		public static var DEFAULT_CONDENSE_WHITE:Boolean = true;		/** Default mouseWheelEnabled value that will be used for each new instance created, default is "false". */		public static var DEFAULT_MOUSEWHEEL_ENABLED:Boolean = false;		/** Default doubleClickEnabled value that will be used for each new instance created, default is "false". */		public static var DEFAULT_DOUBLECLICK_ENABLED:Boolean = false;		/** Default gridFitType value that will be used for each new instance created (GridFitType), default is "none". */		public static var DEFAULT_GRIDFITTYPE:String = "none";		/** Default useRichTextClipboard value that will be used for each new instance created, default is "true". */		public static var DEFAULT_RICHTEXT_CLIPBOARD_ENABLED:Boolean = true;				//------------------------------------		// constructor		//------------------------------------				/**		 * Creates a new instance of the SomaText class.		 * @param value text or htmlText value.		 * @param style of a stylesheet (without dot), you must have a global stylesheet registered (see StyleManager) or pass a stylesheet in the fourth parameter. 		 * @param properties object of properties, shortcut to set properties to the TextField, example: {multiline: true, selectable: true}.		 * @param stylesheet StyleSheet target for the styles used (the global stylesheet will be used if you dont pass any).		 */		public function SomaText(value:String = "", style:String = null, properties:Object = null, stylesheet:StyleSheet = null) {			super();			init(value, style, properties, stylesheet);		}				//		// PRIVATE, PROTECTED		//________________________________________________________________________________________________				/** @private */		// initialize the TextField		protected function init(value:String = "", style:String = null, properties:Object = null, stylesheet:StyleSheet = null):void {			setDefault();			memorizeProperties();			_stylesheet = stylesheet;			// apply style			if (style != null) applyStyle(style);			// apply stylesheet			if (style != null || stylesheet != null) { 				var currentStylesheet:StyleSheet = (_stylesheet != null) ? _stylesheet: Soma.getInstance().styles.getGlobalStyleSheet();				_stylesheet = currentStylesheet;				styleSheet = _stylesheet;			}			if (properties != null) setProperties(properties);			if (value.indexOf("<") != -1 && value.indexOf(">") != -1) {				htmlText = value;			}			else {				text = value;			}		}				/** @private */		// memorize the default properties to reset the style of the TextField		protected function memorizeProperties():void {			_defaultTextFormat = defaultTextFormat;			_defaultProperties = [];			_defaultValues = [];			var listProperties:XMLList = describeType(this)..*.(name() == "accessor" && @access == "readwrite" && @declaredBy == "flash.text::TextField");			for (var i:int=0; i<listProperties.length(); i++) {				_defaultProperties.push(listProperties[i].@name);				_defaultValues.push(this[listProperties[i].@name]);			}		}				/** @private */		// set default properties from global values		protected function setDefault():void {			type = SomaText.DEFAULT_TYPE;			embedFonts = SomaText.DEFAULT_EMBED_FONT;			antiAliasType = SomaText.DEFAULT_ANTIALIAS;			autoSize = SomaText.DEFAULT_AUTOSIZE;			multiline = SomaText.DEFAULT_MULTILINE;			wordWrap = SomaText.DEFAULT_WORDWRAP;			selectable = SomaText.DEFAULT_SELECTABLE;			condenseWhite = SomaText.DEFAULT_CONDENSE_WHITE;			mouseWheelEnabled = SomaText.DEFAULT_MOUSEWHEEL_ENABLED;			doubleClickEnabled = SomaText.DEFAULT_DOUBLECLICK_ENABLED;			gridFitType = SomaText.DEFAULT_GRIDFITTYPE;			useRichTextClipboard = SomaText.DEFAULT_RICHTEXT_CLIPBOARD_ENABLED;		}				/** @private */		// parse an object and apply the properties to the TextField		protected function applyTextFieldValues(obj:Object):void {			for (var prop:String in obj) {				if (this.hasOwnProperty(prop)) {					if (this[prop] is Boolean) {						obj[prop] = SomaUtils.stringToBoolean(obj[prop]);					}					else if (prop == "backgroundColor" || prop == "borderColor") {						obj[prop] = parseInt(String(obj[prop]).substring(1), 16);					}					else if (this[prop] is int) {						obj[prop] = parseInt(obj[prop]);					}					// specific actions					if (prop == "alpha" || prop == "scaleX" || prop == "scaleY") {						obj[prop] *= .01;					}					// apply					this[prop] = obj[prop];				}			}		}				/** @private */		// apply the style to the TextField		protected function applyStyle(style:String):void {			var currentStylesheet:StyleSheet;			var styleTarget:Object;			if (_stylesheet == null) {				// unspecified stylesheet				currentStylesheet = Soma.getInstance().styles.getGlobalStyleSheet();				if (currentStylesheet == null) throw new CairngormError(CairngormMessage.STYLESHEET_GLOBAL_NOT_FOUND);				styleTarget = Soma.getInstance().styles.getGlobalStyle("."+style);			}			else {				// specified stylesheet				currentStylesheet = _stylesheet;				styleTarget = Soma.getInstance().styles.getStyle("."+style, _stylesheet);			}			applyTextFieldValues(styleTarget);			var styleTextFormat:TextFormat = currentStylesheet.transform(styleTarget);			defaultTextFormat = styleTextFormat;			_style = style;		}				// PUBLIC		//________________________________________________________________________________________________				/**		 * Set a style from a stylesheet (no dot), example: somatext.setStyle("myStyle").		 * @param style style name from a stylesheet .		 * @param stylesheet stylesheet of the style. If none is passed, the global stylesheet will be used.		 */		public function setStyle(style:String, stylesheet:StyleSheet = null):void {			if (stylesheet != null) _stylesheet = stylesheet; // if stylesheet passed, set to private			if (styleSheet != null) styleSheet = null; // is TextField.styleSheet exists, set to null to apply TextFormat			applyStyle(style);			if (_stylesheet != null) styleSheet = _stylesheet; // reassign stylesheet		}				/**		 * The type of the text field. Either one of the following TextFieldType constants: TextFieldType.DYNAMIC, which specifies a dynamic text field, which a user cannot edit, or TextFieldType.INPUT, which specifies an input text field, which a user can edit.<br/><br/>		 * @param value A String.		 */		 override public function set type(value:String):void {			var currentText:String = text;			var currentHtmlText:String = htmlText;			switch (value) {				case TextFieldType.INPUT:					styleSheet = null;					break;				case TextFieldType.DYNAMIC:					if (_stylesheet != null) styleSheet = _stylesheet;					break;			}			super.type = value;			text = currentText;			htmlText = currentHtmlText;		}				/**		 * Get the style applied to the TextField.		 * @return A String.		 */
		public function get style():String {			return _style;
		}				/**		 * Remove styles and stylesheet from a TextField to show the default values and/or set new styles and stylesheet.		 */		public function resetToDefault():void {			var currentText:String = text;			var currentHtmlText:String = htmlText;			_stylesheet = null;			styleSheet = null;			for (var i:int=0; i<_defaultProperties.length; i++) {				this[_defaultProperties[i]] = _defaultValues[i];			}			text = currentText;			htmlText = currentHtmlText;		}				/**		 * Shortcut to set TextField properties, example: somatext.setProperties({multiline: true, selectable: true});		 * @param properties Object of TextField properties.		 */		public function setProperties(properties:Object):void {			for (var prop:String in properties) {				if (this.hasOwnProperty(prop)) {					this[prop] = properties[prop];				}			}		}				/**		 * Display information about the textfield and the styles used.		 * <listing version="3.0">		 * trace(somaTextInstance.info());		 * </listing>		 * @return A String.		 */		public function info():String {			var str:String = "[SomaText] " + name + "\n";			str += "--- SomaText properties:\n";			var listProperties:XMLList = describeType(this)..*.(name() == "accessor" && (@access == "readwrite" || @access == "readonly") && (@declaredBy == "flash.text::TextField" || @declaredBy == "flash.text::TextFormat" || @declaredBy == "com.soma.view::SomaText"));			for (var i:int=0; i<listProperties.length(); i++) {				str += listProperties[i].@name + ": " + this[listProperties[i].@name] + "\n";			}			str += "--- SomaText style properties (defaultTextFormat):\n";			var listPropertiesTFD:XMLList = describeType(defaultTextFormat)..*.(name() == "accessor" && (@access == "readwrite" || @access == "readonly") && (@declaredBy == "flash.text::TextFormat"));			for (var j:int=0; j<listPropertiesTFD.length(); j++) {				str += listPropertiesTFD[j].@name + ": " + defaultTextFormat[listPropertiesTFD[j].@name] + "\n";			}			return str;		}				/**		 *  Indicates whether the text field is a multiline text field. If the value is true, the text field is multiline; if the value is false, the text field is a single-line text field.		 *  @param value A Boolean.		 */		override public function set multiline(value:Boolean):void {			// set multiline after set an HTML text seems to remove the formatting			// this function solve the problem			var currentText:String = text;			var currentHtmlText:String = htmlText;			super.multiline = value;			text = currentText;			htmlText = currentHtmlText;		}			}}