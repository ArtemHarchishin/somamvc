package com.soma.view {		import com.soma.Soma;	import com.soma.utils.SomaUtils;	import com.soma.model.StyleManager;	import flash.text.TextFieldType;
	import flash.text.TextFormat;	import flash.text.StyleSheet;	import flash.text.TextField;	import flash.utils.describeType;
	/**	 * <b>Author:</b> Romuald Quantin - <a href="http://www.soundstep.com/" target="_blank">www.soundstep.com</a><br />	 * <b>Company:</b> Less Rain - <a href="http://www.lessrain.com/" target="_blank">www.lessrain.com</a><br />	 * <b>Class version:</b> 1.0<br />	 * <b>Actionscript version:</b> 3.0<br />	 * <b>Copyright:</b> 	 * <br />	 * <b>Date:</b> 11 Dec 2008<br />	 * <b>Usage:</b>	 * @example	 * <listing version="3.0"></listing>	 */		public class SomaText extends TextField {
		//------------------------------------		// private, protected properties		//------------------------------------				private var _style:String;		private var _stylesheet:StyleSheet;		private var _defaultTextFormat:TextFormat;		private var _defaultProperties:Array;		private var _defaultValues:Array;				//------------------------------------		// public properties		//------------------------------------				public static var DEFAULT_TYPE:String = "dynamic";		public static var DEFAULT_EMBED_FONT:Boolean = false;		public static var DEFAULT_ANTIALIAS:String = "advanced";		public static var DEFAULT_AUTOSIZE:String = "left";		public static var DEFAULT_MULTILINE:Boolean = false;		public static var DEFAULT_WORDWRAP:Boolean = false;		public static var DEFAULT_SELECTABLE:Boolean = false;		public static var DEFAULT_CONDENSE_WHITE:Boolean = true;		public static var DEFAULT_MOUSEWHEEL_ENABLED:Boolean = false;		public static var DEFAULT_DOUBLECLICK_ENABLED:Boolean = false;		public static var DEFAULT_GRIDFITTYPE:String = "none";		public static var DEFAULT_RICHTEXT_CLIPBOARD_ENABLED:Boolean = true;				//------------------------------------		// constructor		//------------------------------------				public function SomaText(value:String = "", style:String = null, stylesheet:StyleSheet = null, properties:Object = null) {			super();			init(value, style, stylesheet, properties);		}				//		// PRIVATE, PROTECTED		//________________________________________________________________________________________________				protected function init(value:String = "", style:String = null, stylesheet:StyleSheet = null, properties:Object = null):void {			setDefault();			memorizeProperties();			_stylesheet = stylesheet;			// apply style			if (style != null) applyStyle(style);			// apply stylesheet			if (style != null || stylesheet != null) { 				var currentStylesheet:StyleSheet = (_stylesheet != null) ? _stylesheet: Soma.getInstance().styles.getGlobalStyleSheet();				_stylesheet = currentStylesheet;				styleSheet = _stylesheet;			}			if (properties != null) setProperties(properties);			if (value.indexOf("<") != -1 && value.indexOf(">") != -1) {				htmlText = value;			}			else {				text = value;			}		}				protected function memorizeProperties():void {			_defaultTextFormat = defaultTextFormat;			_defaultProperties = [];			_defaultValues = [];			var listProperties:XMLList = describeType(this)..*.(name() == "accessor" && @access == "readwrite" && @declaredBy == "flash.text::TextField");			for (var i:int=0; i<listProperties.length(); i++) {				_defaultProperties.push(listProperties[i].@name);				_defaultValues.push(this[listProperties[i].@name]);			}		}				protected function setDefault():void {			type = SomaText.DEFAULT_TYPE;			embedFonts = SomaText.DEFAULT_EMBED_FONT;			antiAliasType = SomaText.DEFAULT_ANTIALIAS;			autoSize = SomaText.DEFAULT_AUTOSIZE;			multiline = SomaText.DEFAULT_MULTILINE;			wordWrap = SomaText.DEFAULT_WORDWRAP;			selectable = SomaText.DEFAULT_SELECTABLE;			condenseWhite = SomaText.DEFAULT_CONDENSE_WHITE;			mouseWheelEnabled = SomaText.DEFAULT_MOUSEWHEEL_ENABLED;			doubleClickEnabled = SomaText.DEFAULT_DOUBLECLICK_ENABLED;			gridFitType = SomaText.DEFAULT_GRIDFITTYPE;			useRichTextClipboard = SomaText.DEFAULT_RICHTEXT_CLIPBOARD_ENABLED;		}				protected function applyTextFieldValues(obj:Object):void {			for (var prop:String in obj) {				if (this.hasOwnProperty(prop)) {					if (this[prop] is Boolean) {						obj[prop] = SomaUtils.stringToBoolean(obj[prop]);					}					else if (prop == "backgroundColor" || prop == "borderColor") {						obj[prop] = parseInt(String(obj[prop]).substring(1), 16);					}					else if (this[prop] is int) {						obj[prop] = parseInt(obj[prop]);					}					// specific actions					if (prop == "alpha" || prop == "scaleX" || prop == "scaleY") {						obj[prop] *= .01;					}					// apply					this[prop] = obj[prop];				}			}		}				protected function applyStyle(style:String):void {			var currentStylesheet:StyleSheet;			var styleTarget:Object;			if (_stylesheet == null) {				// unspecified stylesheet				currentStylesheet = Soma.getInstance().styles.getGlobalStyleSheet();				if (currentStylesheet == null) throw new Error("globalStyleSheetMissing");				styleTarget = Soma.getInstance().styles.getGlobalStyle("."+style);			}			else {				// specified stylesheet				currentStylesheet = _stylesheet;				styleTarget = Soma.getInstance().styles.getStyles(_stylesheet, "."+style);			}			applyTextFieldValues(styleTarget);			var styleTextFormat:TextFormat = currentStylesheet.transform(styleTarget);			defaultTextFormat = styleTextFormat;			_style = style;		}				// PUBLIC		//________________________________________________________________________________________________				public function setStyle(style:String, stylesheet:StyleSheet = null):void {			if (stylesheet != null) _stylesheet = stylesheet; // if stylesheet passed, set to private			if (styleSheet != null) styleSheet = null; // is TextField.styleSheet exists, set to null to apply TextFormat			applyStyle(style);			if (_stylesheet != null) styleSheet = _stylesheet; // reassign stylesheet		}				override public function set type(value:String):void {			var currentText:String = text;			var currentHtmlText:String = htmlText;			switch (value) {				case TextFieldType.INPUT:					styleSheet = null;					break;				case TextFieldType.DYNAMIC:					if (_stylesheet != null) styleSheet = _stylesheet;					break;			}			super.type = value;			text = currentText;			htmlText = currentHtmlText;		}		
		public function get style():String {			return _style;
		}				public function resetToDefault():void {			var currentText:String = text;			var currentHtmlText:String = htmlText;			_stylesheet = null;			styleSheet = null;			for (var i:int=0; i<_defaultProperties.length; i++) {				this[_defaultProperties[i]] = _defaultValues[i];			}			text = currentText;			htmlText = currentHtmlText;		}				public function setProperties(properties:Object):void {			for (var prop:String in properties) {				if (this.hasOwnProperty(prop)) {					this[prop] = properties[prop];				}			}		}				override public function toString():String {			var str:String = "----- SomaText properties -------------------------------------\n";			var listProperties:XMLList = describeType(this)..*.(name() == "accessor" && (@access == "readwrite" || @access == "readonly") && (@declaredBy == "flash.text::TextField" || @declaredBy == "flash.text::TextFormat" || @declaredBy == "com.soma.view::SomaText"));			for (var i:int=0; i<listProperties.length(); i++) {				str += listProperties[i].@name + ": " + this[listProperties[i].@name] + "\n";			}			str += "----- SomaText style properties (defaultTextFormat) -----------\n";			var listPropertiesTFD:XMLList = describeType(defaultTextFormat)..*.(name() == "accessor" && (@access == "readwrite" || @access == "readonly") && (@declaredBy == "flash.text::TextFormat"));			for (var j:int=0; j<listPropertiesTFD.length(); j++) {				str += listPropertiesTFD[j].@name + ": " + defaultTextFormat[listPropertiesTFD[j].@name] + "\n";			}			return str;		}				override public function set multiline(value:Boolean):void {			// set multiline after set an HTML text seems to remove the formatting			// this function solve the problem			var currentText:String = text;			var currentHtmlText:String = htmlText;			super.multiline = value;			text = currentText;			htmlText = currentHtmlText;		}			}}