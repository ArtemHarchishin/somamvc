package com.soma.utils {	import flash.system.LoaderContext;		import flash.text.TextFormat;		import flash.text.TextFieldAutoSize;		import flash.text.TextField;		import flash.net.URLRequest;		import flash.display.Loader;		import flash.display.Sprite;		import flash.events.Event;	import flash.events.ProgressEvent;	import flash.events.IOErrorEvent;		/**	 * <b>Author:</b> Romuald Quantin - <a href="http://www.soundstep.com/" target="_blank">www.soundstep.com</a><br />	 * <b>Class version:</b> BETA 1.0<br />	 * <b>Actionscript version:</b> 3.0<br />	 * <b>Copyright:</b> 	 * <br />	 * <b>Date:</b> 05-2008<br />	 * <b>Usage:</b>	 * @example	 * <listing version="3.0"></listing>	 */	public class BasicLoader extends Sprite {				//------------------------------------		// private, protected properties		//------------------------------------				private var _loader:Loader;		private var _file:String;		private var _text:TextField;		private var _textFormat:TextFormat;		private var _embedFont:Boolean;		//------------------------------------		// public properties		//------------------------------------				//------------------------------------		// constructor		//------------------------------------				public function BasicLoader(file:String, textColor:int = 0x000000, nameSprite:String = "home", autoStart:Boolean = true) {			_file = file;			name = nameSprite;			_text = new TextField();			_text.textColor = textColor;			_text.autoSize = TextFieldAutoSize.CENTER;			_text.selectable = false;			if (autoStart) start();		}		//		// PRIVATE		//________________________________________________________________________________________________				private function startHandler(e:Event):void {			update();			addChild(_text);		}				private function progressHandler(e:ProgressEvent):void {			var percent:Number = Math.round(e.bytesLoaded * 100 / e.bytesTotal);			_text.text = "Loading " + percent + "%";			update();		}				private function initHandler(e:Event):void {			dispose();		}				private function errorHandler(e:IOErrorEvent):void {			trace("Error loading " + _loader.content);		}				// PUBLIC		//________________________________________________________________________________________________				public function dispose():void {			removeChild(_text);			_loader.contentLoaderInfo.removeEventListener(Event.OPEN, startHandler, false);			_loader.contentLoaderInfo.removeEventListener(ProgressEvent.PROGRESS, progressHandler, false);			_loader.contentLoaderInfo.removeEventListener(Event.INIT, initHandler, false);			_loader.contentLoaderInfo.removeEventListener(IOErrorEvent.IO_ERROR, errorHandler, false);		}				public function start(loaderContext:LoaderContext = null):void {			_loader = new Loader();			_loader.contentLoaderInfo.addEventListener(Event.OPEN, startHandler, false, 0, true);			_loader.contentLoaderInfo.addEventListener(ProgressEvent.PROGRESS, progressHandler, false, 0, true);			_loader.contentLoaderInfo.addEventListener(Event.INIT, initHandler, false, 0, true);			_loader.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR, errorHandler, false, 0, true);			_loader.load(new URLRequest(_file), loaderContext);			addChild(_loader);		}
		private function update():void {			if (stage != null) {				_text.x = Math.round((stage.stageWidth * .5) - (_text.width * .5));				_text.y = Math.round((stage.stageHeight * .5) - (_text.height * .5));			}		}				public function get embedFont():Boolean {			return _embedFont;		}				public function set embedFont(embedFont:Boolean):void {			_embedFont = embedFont;			_text.embedFonts = true;		}				public function get textFormat():TextFormat {			return _textFormat;		}				public function set textFormat(textFormat:TextFormat):void {			_textFormat = textFormat;			_text.defaultTextFormat = _textFormat;		}				public function get text():TextField {			return _text;		}
		
		public function get loader():Loader {			return _loader;
		}				public function get file():String {			return _file;		}	}}